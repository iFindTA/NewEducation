/// Generated by the Protocol Buffers 3.5.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "PBSignUser.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct PbsignUserRoot {
    public static let `default` = PbsignUserRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        PbclassRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}



//Enum type declaration start 

public enum PbuserRole:Int32, GeneratedEnum {
    ///游客
    case visitor = 0

    ///老师
    case teacher = 1

    ///学生
    case student = 2

    ///家长
    case parent = 3

    ///园务
    case garden = 4
    public func toString() -> String {
        switch self {
        case .visitor: return "Visitor"
        case .teacher: return "Teacher"
        case .student: return "Student"
        case .parent: return "Parent"
        case .garden: return "Garden"
        }
    }
    public static func fromString(_ str:String) throws -> PbuserRole {
        switch str {
        case "Visitor":    return .visitor
        case "Teacher":    return .teacher
        case "Student":    return .student
        case "Parent":    return .parent
        case "Garden":    return .garden
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .visitor: return ".visitor"
        case .teacher: return ".teacher"
        case .student: return ".student"
        case .parent: return ".parent"
        case .garden: return ".garden"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:PbuserRole, rhs:PbuserRole) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 

final public class PbuserList : GeneratedMessage {
    public typealias BuilderType = PbuserList.Builder

    public static func == (lhs: PbuserList, rhs: PbuserList) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.userList == rhs.userList)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var userList:Array<Pbuser>  = Array<Pbuser>()
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        for oneElementUserList in userList {
              try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementUserList)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        for oneElementUserList in userList {
            serialize_size += oneElementUserList.computeMessageSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> PbuserList.Builder {
        return PbuserList.classBuilder() as! PbuserList.Builder
    }
    public func getBuilder() -> PbuserList.Builder {
        return classBuilder() as! PbuserList.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PbuserList.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PbuserList.Builder()
    }
    public func toBuilder() throws -> PbuserList.Builder {
        return try PbuserList.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:PbuserList) throws -> PbuserList.Builder {
        return try PbuserList.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if !userList.isEmpty {
            var jsonArrayUserList:Array<Dictionary<String,Any>> = []
            for oneValueUserList in userList {
                let ecodedMessageUserList = try oneValueUserList.encode()
                jsonArrayUserList.append(ecodedMessageUserList)
            }
            jsonMap["userList"] = jsonArrayUserList
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> PbuserList {
        return try PbuserList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> PbuserList {
        return try PbuserList.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        var userListElementIndex:Int = 0
        for oneElementUserList in userList {
            output += "\(indent) userList[\(userListElementIndex)] {\n"
            output += try oneElementUserList.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            userListElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementUserList in userList {
                hashCode = (hashCode &* 31) &+ oneElementUserList.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "PbuserList"
    }
    override public func className() -> String {
        return "PbuserList"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:PbuserList = PbuserList()
        public func getMessage() -> PbuserList {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///用户列表
        public var userList:Array<Pbuser> {
            get {
                return builderResult.userList
            }
            set (value) {
                builderResult.userList = value
            }
        }
        @discardableResult
        public func setUserList(_ value:Array<Pbuser>) -> PbuserList.Builder {
            self.userList = value
            return self
        }
        @discardableResult
        public func clearUserList() -> PbuserList.Builder {
            builderResult.userList.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> PbuserList.Builder {
            builderResult = PbuserList()
            return self
        }
        override public func clone() throws -> PbuserList.Builder {
            return try PbuserList.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> PbuserList {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> PbuserList {
            let returnMe:PbuserList = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:PbuserList) throws -> PbuserList.Builder {
            if other == PbuserList() {
                return self
            }
            if !other.userList.isEmpty  {
                 builderResult.userList += other.userList
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> PbuserList.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PbuserList.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder = Pbuser.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    userList.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> PbuserList.Builder {
            let resultDecodedBuilder = PbuserList.Builder()
            if let jsonValueUserList = jsonMap["userList"] as? Array<Dictionary<String,Any>> {
                var jsonArrayUserList:Array<Pbuser> = []
                for oneValueUserList in jsonValueUserList {
                    let messageFromStringUserList = try Pbuser.Builder.decodeToBuilder(jsonMap:oneValueUserList).build()

                    jsonArrayUserList.append(messageFromStringUserList)
                }
                resultDecodedBuilder.userList = jsonArrayUserList
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> PbuserList.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try PbuserList.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Pbdean : GeneratedMessage {
    public typealias BuilderType = Pbdean.Builder

    public static func == (lhs: Pbdean, rhs: Pbdean) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.classes == rhs.classes)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var classes:Array<Pbclass>  = Array<Pbclass>()
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        for oneElementClasses in classes {
              try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementClasses)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        for oneElementClasses in classes {
            serialize_size += oneElementClasses.computeMessageSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Pbdean.Builder {
        return Pbdean.classBuilder() as! Pbdean.Builder
    }
    public func getBuilder() -> Pbdean.Builder {
        return classBuilder() as! Pbdean.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbdean.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbdean.Builder()
    }
    public func toBuilder() throws -> Pbdean.Builder {
        return try Pbdean.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pbdean) throws -> Pbdean.Builder {
        return try Pbdean.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if !classes.isEmpty {
            var jsonArrayClasses:Array<Dictionary<String,Any>> = []
            for oneValueClasses in classes {
                let ecodedMessageClasses = try oneValueClasses.encode()
                jsonArrayClasses.append(ecodedMessageClasses)
            }
            jsonMap["classes"] = jsonArrayClasses
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pbdean {
        return try Pbdean.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pbdean {
        return try Pbdean.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        var classesElementIndex:Int = 0
        for oneElementClasses in classes {
            output += "\(indent) classes[\(classesElementIndex)] {\n"
            output += try oneElementClasses.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            classesElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementClasses in classes {
                hashCode = (hashCode &* 31) &+ oneElementClasses.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pbdean"
    }
    override public func className() -> String {
        return "Pbdean"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Pbdean = Pbdean()
        public func getMessage() -> Pbdean {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///班级列表
        public var classes:Array<Pbclass> {
            get {
                return builderResult.classes
            }
            set (value) {
                builderResult.classes = value
            }
        }
        @discardableResult
        public func setClasses(_ value:Array<Pbclass>) -> Pbdean.Builder {
            self.classes = value
            return self
        }
        @discardableResult
        public func clearClasses() -> Pbdean.Builder {
            builderResult.classes.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Pbdean.Builder {
            builderResult = Pbdean()
            return self
        }
        override public func clone() throws -> Pbdean.Builder {
            return try Pbdean.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Pbdean {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Pbdean {
            let returnMe:Pbdean = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Pbdean) throws -> Pbdean.Builder {
            if other == Pbdean() {
                return self
            }
            if !other.classes.isEmpty  {
                 builderResult.classes += other.classes
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pbdean.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbdean.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder = Pbclass.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    classes.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pbdean.Builder {
            let resultDecodedBuilder = Pbdean.Builder()
            if let jsonValueClasses = jsonMap["classes"] as? Array<Dictionary<String,Any>> {
                var jsonArrayClasses:Array<Pbclass> = []
                for oneValueClasses in jsonValueClasses {
                    let messageFromStringClasses = try Pbclass.Builder.decodeToBuilder(jsonMap:oneValueClasses).build()

                    jsonArrayClasses.append(messageFromStringClasses)
                }
                resultDecodedBuilder.classes = jsonArrayClasses
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Pbdean.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pbdean.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Pbparent : GeneratedMessage {
    public typealias BuilderType = Pbparent.Builder

    public static func == (lhs: Pbparent, rhs: Pbparent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasMobile == rhs.hasMobile) && (!lhs.hasMobile || lhs.mobile == rhs.mobile)
        fieldCheck = fieldCheck && (lhs.student == rhs.student)
        fieldCheck = fieldCheck && (lhs.classes == rhs.classes)
        fieldCheck = fieldCheck && (lhs.hasCurrentStuId == rhs.hasCurrentStuId) && (!lhs.hasCurrentStuId || lhs.currentStuId == rhs.currentStuId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    ///手机号码
    public fileprivate(set) var mobile:String! = nil
    public fileprivate(set) var hasMobile:Bool = false

    public fileprivate(set) var student:Array<Pbstudent>  = Array<Pbstudent>()
    public fileprivate(set) var classes:Array<Pbclass>  = Array<Pbclass>()
    ///当前选择的学生ID
    public fileprivate(set) var currentStuId:Int64! = nil
    public fileprivate(set) var hasCurrentStuId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasMobile {
            try codedOutputStream.writeString(fieldNumber: 1, value:mobile)
        }
        for oneElementStudent in student {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementStudent)
        }
        for oneElementClasses in classes {
              try codedOutputStream.writeMessage(fieldNumber: 3, value:oneElementClasses)
        }
        if hasCurrentStuId {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:currentStuId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasMobile {
            serialize_size += mobile.computeStringSize(fieldNumber: 1)
        }
        for oneElementStudent in student {
            serialize_size += oneElementStudent.computeMessageSize(fieldNumber: 2)
        }
        for oneElementClasses in classes {
            serialize_size += oneElementClasses.computeMessageSize(fieldNumber: 3)
        }
        if hasCurrentStuId {
            serialize_size += currentStuId.computeInt64Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Pbparent.Builder {
        return Pbparent.classBuilder() as! Pbparent.Builder
    }
    public func getBuilder() -> Pbparent.Builder {
        return classBuilder() as! Pbparent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbparent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbparent.Builder()
    }
    public func toBuilder() throws -> Pbparent.Builder {
        return try Pbparent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pbparent) throws -> Pbparent.Builder {
        return try Pbparent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasMobile {
            jsonMap["mobile"] = mobile
        }
        if !student.isEmpty {
            var jsonArrayStudent:Array<Dictionary<String,Any>> = []
            for oneValueStudent in student {
                let ecodedMessageStudent = try oneValueStudent.encode()
                jsonArrayStudent.append(ecodedMessageStudent)
            }
            jsonMap["student"] = jsonArrayStudent
        }
        if !classes.isEmpty {
            var jsonArrayClasses:Array<Dictionary<String,Any>> = []
            for oneValueClasses in classes {
                let ecodedMessageClasses = try oneValueClasses.encode()
                jsonArrayClasses.append(ecodedMessageClasses)
            }
            jsonMap["classes"] = jsonArrayClasses
        }
        if hasCurrentStuId {
            jsonMap["currentStuID"] = "\(currentStuId!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pbparent {
        return try Pbparent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pbparent {
        return try Pbparent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasMobile {
            output += "\(indent) mobile: \(mobile) \n"
        }
        var studentElementIndex:Int = 0
        for oneElementStudent in student {
            output += "\(indent) student[\(studentElementIndex)] {\n"
            output += try oneElementStudent.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            studentElementIndex += 1
        }
        var classesElementIndex:Int = 0
        for oneElementClasses in classes {
            output += "\(indent) classes[\(classesElementIndex)] {\n"
            output += try oneElementClasses.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            classesElementIndex += 1
        }
        if hasCurrentStuId {
            output += "\(indent) currentStuId: \(currentStuId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMobile {
                hashCode = (hashCode &* 31) &+ mobile.hashValue
            }
            for oneElementStudent in student {
                hashCode = (hashCode &* 31) &+ oneElementStudent.hashValue
            }
            for oneElementClasses in classes {
                hashCode = (hashCode &* 31) &+ oneElementClasses.hashValue
            }
            if hasCurrentStuId {
                hashCode = (hashCode &* 31) &+ currentStuId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pbparent"
    }
    override public func className() -> String {
        return "Pbparent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Pbparent = Pbparent()
        public func getMessage() -> Pbparent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///手机号码
        public var mobile:String {
            get {
                return builderResult.mobile
            }
            set (value) {
                builderResult.hasMobile = true
                builderResult.mobile = value
            }
        }
        public var hasMobile:Bool {
            get {
                return builderResult.hasMobile
            }
        }
        @discardableResult
        public func setMobile(_ value:String) -> Pbparent.Builder {
            self.mobile = value
            return self
        }
        @discardableResult
        public func clearMobile() -> Pbparent.Builder{
            builderResult.hasMobile = false
            builderResult.mobile = nil
            return self
        }
        ///学生列表
        public var student:Array<Pbstudent> {
            get {
                return builderResult.student
            }
            set (value) {
                builderResult.student = value
            }
        }
        @discardableResult
        public func setStudent(_ value:Array<Pbstudent>) -> Pbparent.Builder {
            self.student = value
            return self
        }
        @discardableResult
        public func clearStudent() -> Pbparent.Builder {
            builderResult.student.removeAll(keepingCapacity: false)
            return self
        }
        ///学生班级列表
        public var classes:Array<Pbclass> {
            get {
                return builderResult.classes
            }
            set (value) {
                builderResult.classes = value
            }
        }
        @discardableResult
        public func setClasses(_ value:Array<Pbclass>) -> Pbparent.Builder {
            self.classes = value
            return self
        }
        @discardableResult
        public func clearClasses() -> Pbparent.Builder {
            builderResult.classes.removeAll(keepingCapacity: false)
            return self
        }
        ///当前选择的学生ID
        public var currentStuId:Int64 {
            get {
                return builderResult.currentStuId
            }
            set (value) {
                builderResult.hasCurrentStuId = true
                builderResult.currentStuId = value
            }
        }
        public var hasCurrentStuId:Bool {
            get {
                return builderResult.hasCurrentStuId
            }
        }
        @discardableResult
        public func setCurrentStuId(_ value:Int64) -> Pbparent.Builder {
            self.currentStuId = value
            return self
        }
        @discardableResult
        public func clearCurrentStuId() -> Pbparent.Builder{
            builderResult.hasCurrentStuId = false
            builderResult.currentStuId = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Pbparent.Builder {
            builderResult = Pbparent()
            return self
        }
        override public func clone() throws -> Pbparent.Builder {
            return try Pbparent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Pbparent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Pbparent {
            let returnMe:Pbparent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Pbparent) throws -> Pbparent.Builder {
            if other == Pbparent() {
                return self
            }
            if other.hasMobile {
                mobile = other.mobile
            }
            if !other.student.isEmpty  {
                 builderResult.student += other.student
            }
            if !other.classes.isEmpty  {
                 builderResult.classes += other.classes
            }
            if other.hasCurrentStuId {
                currentStuId = other.currentStuId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pbparent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbparent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    mobile = try codedInputStream.readString()

                case 18:
                    let subBuilder = Pbstudent.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    student.append(subBuilder.buildPartial())

                case 26:
                    let subBuilder = Pbclass.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    classes.append(subBuilder.buildPartial())

                case 32:
                    currentStuId = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pbparent.Builder {
            let resultDecodedBuilder = Pbparent.Builder()
            if let jsonValueMobile = jsonMap["mobile"] as? String {
                resultDecodedBuilder.mobile = jsonValueMobile
            }
            if let jsonValueStudent = jsonMap["student"] as? Array<Dictionary<String,Any>> {
                var jsonArrayStudent:Array<Pbstudent> = []
                for oneValueStudent in jsonValueStudent {
                    let messageFromStringStudent = try Pbstudent.Builder.decodeToBuilder(jsonMap:oneValueStudent).build()

                    jsonArrayStudent.append(messageFromStringStudent)
                }
                resultDecodedBuilder.student = jsonArrayStudent
            }
            if let jsonValueClasses = jsonMap["classes"] as? Array<Dictionary<String,Any>> {
                var jsonArrayClasses:Array<Pbclass> = []
                for oneValueClasses in jsonValueClasses {
                    let messageFromStringClasses = try Pbclass.Builder.decodeToBuilder(jsonMap:oneValueClasses).build()

                    jsonArrayClasses.append(messageFromStringClasses)
                }
                resultDecodedBuilder.classes = jsonArrayClasses
            }
            if let jsonValueCurrentStuId = jsonMap["currentStuID"] as? String {
                resultDecodedBuilder.currentStuId = Int64(jsonValueCurrentStuId)!
            } else if let jsonValueCurrentStuId = jsonMap["currentStuID"] as? Int {
                resultDecodedBuilder.currentStuId = Int64(jsonValueCurrentStuId)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Pbparent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pbparent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Pbteacher : GeneratedMessage {
    public typealias BuilderType = Pbteacher.Builder

    public static func == (lhs: Pbteacher, rhs: Pbteacher) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasMobile == rhs.hasMobile) && (!lhs.hasMobile || lhs.mobile == rhs.mobile)
        fieldCheck = fieldCheck && (lhs.classes == rhs.classes)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    ///手机号码
    public fileprivate(set) var mobile:String! = nil
    public fileprivate(set) var hasMobile:Bool = false

    public fileprivate(set) var classes:Array<Pbclass>  = Array<Pbclass>()
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasMobile {
            try codedOutputStream.writeString(fieldNumber: 1, value:mobile)
        }
        for oneElementClasses in classes {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementClasses)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasMobile {
            serialize_size += mobile.computeStringSize(fieldNumber: 1)
        }
        for oneElementClasses in classes {
            serialize_size += oneElementClasses.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Pbteacher.Builder {
        return Pbteacher.classBuilder() as! Pbteacher.Builder
    }
    public func getBuilder() -> Pbteacher.Builder {
        return classBuilder() as! Pbteacher.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbteacher.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbteacher.Builder()
    }
    public func toBuilder() throws -> Pbteacher.Builder {
        return try Pbteacher.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pbteacher) throws -> Pbteacher.Builder {
        return try Pbteacher.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasMobile {
            jsonMap["mobile"] = mobile
        }
        if !classes.isEmpty {
            var jsonArrayClasses:Array<Dictionary<String,Any>> = []
            for oneValueClasses in classes {
                let ecodedMessageClasses = try oneValueClasses.encode()
                jsonArrayClasses.append(ecodedMessageClasses)
            }
            jsonMap["classes"] = jsonArrayClasses
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pbteacher {
        return try Pbteacher.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pbteacher {
        return try Pbteacher.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasMobile {
            output += "\(indent) mobile: \(mobile) \n"
        }
        var classesElementIndex:Int = 0
        for oneElementClasses in classes {
            output += "\(indent) classes[\(classesElementIndex)] {\n"
            output += try oneElementClasses.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            classesElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMobile {
                hashCode = (hashCode &* 31) &+ mobile.hashValue
            }
            for oneElementClasses in classes {
                hashCode = (hashCode &* 31) &+ oneElementClasses.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pbteacher"
    }
    override public func className() -> String {
        return "Pbteacher"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Pbteacher = Pbteacher()
        public func getMessage() -> Pbteacher {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///手机号码
        public var mobile:String {
            get {
                return builderResult.mobile
            }
            set (value) {
                builderResult.hasMobile = true
                builderResult.mobile = value
            }
        }
        public var hasMobile:Bool {
            get {
                return builderResult.hasMobile
            }
        }
        @discardableResult
        public func setMobile(_ value:String) -> Pbteacher.Builder {
            self.mobile = value
            return self
        }
        @discardableResult
        public func clearMobile() -> Pbteacher.Builder{
            builderResult.hasMobile = false
            builderResult.mobile = nil
            return self
        }
        ///关联的班级列表
        public var classes:Array<Pbclass> {
            get {
                return builderResult.classes
            }
            set (value) {
                builderResult.classes = value
            }
        }
        @discardableResult
        public func setClasses(_ value:Array<Pbclass>) -> Pbteacher.Builder {
            self.classes = value
            return self
        }
        @discardableResult
        public func clearClasses() -> Pbteacher.Builder {
            builderResult.classes.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Pbteacher.Builder {
            builderResult = Pbteacher()
            return self
        }
        override public func clone() throws -> Pbteacher.Builder {
            return try Pbteacher.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Pbteacher {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Pbteacher {
            let returnMe:Pbteacher = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Pbteacher) throws -> Pbteacher.Builder {
            if other == Pbteacher() {
                return self
            }
            if other.hasMobile {
                mobile = other.mobile
            }
            if !other.classes.isEmpty  {
                 builderResult.classes += other.classes
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pbteacher.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbteacher.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    mobile = try codedInputStream.readString()

                case 18:
                    let subBuilder = Pbclass.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    classes.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pbteacher.Builder {
            let resultDecodedBuilder = Pbteacher.Builder()
            if let jsonValueMobile = jsonMap["mobile"] as? String {
                resultDecodedBuilder.mobile = jsonValueMobile
            }
            if let jsonValueClasses = jsonMap["classes"] as? Array<Dictionary<String,Any>> {
                var jsonArrayClasses:Array<Pbclass> = []
                for oneValueClasses in jsonValueClasses {
                    let messageFromStringClasses = try Pbclass.Builder.decodeToBuilder(jsonMap:oneValueClasses).build()

                    jsonArrayClasses.append(messageFromStringClasses)
                }
                resultDecodedBuilder.classes = jsonArrayClasses
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Pbteacher.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pbteacher.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Pbstudent : GeneratedMessage {
    public typealias BuilderType = Pbstudent.Builder

    public static func == (lhs: Pbstudent, rhs: Pbstudent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
        fieldCheck = fieldCheck && (lhs.hasUuid == rhs.hasUuid) && (!lhs.hasUuid || lhs.uuid == rhs.uuid)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasClassId == rhs.hasClassId) && (!lhs.hasClassId || lhs.classId == rhs.classId)
        fieldCheck = fieldCheck && (lhs.hasGradeId == rhs.hasGradeId) && (!lhs.hasGradeId || lhs.gradeId == rhs.gradeId)
        fieldCheck = fieldCheck && (lhs.hasClassNo == rhs.hasClassNo) && (!lhs.hasClassNo || lhs.classNo == rhs.classNo)
        fieldCheck = fieldCheck && (lhs.hasBirthday == rhs.hasBirthday) && (!lhs.hasBirthday || lhs.birthday == rhs.birthday)
        fieldCheck = fieldCheck && (lhs.hasParentType == rhs.hasParentType) && (!lhs.hasParentType || lhs.parentType == rhs.parentType)
        fieldCheck = fieldCheck && (lhs.hasGender == rhs.hasGender) && (!lhs.hasGender || lhs.gender == rhs.gender)
        fieldCheck = fieldCheck && (lhs.hasPortrait == rhs.hasPortrait) && (!lhs.hasPortrait || lhs.portrait == rhs.portrait)
        fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var id:Int64! = nil
    public fileprivate(set) var hasId:Bool = false

    ///唯一统一标示符
    public fileprivate(set) var uuid:String! = nil
    public fileprivate(set) var hasUuid:Bool = false

    ///名称
    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    ///班级
    public fileprivate(set) var classId:Int64! = nil
    public fileprivate(set) var hasClassId:Bool = false

    ///年级
    public fileprivate(set) var gradeId:Int64! = nil
    public fileprivate(set) var hasGradeId:Bool = false

    ///班级码
    public fileprivate(set) var classNo:String! = nil
    public fileprivate(set) var hasClassNo:Bool = false

    ///出生日期
    public fileprivate(set) var birthday:Int64! = nil
    public fileprivate(set) var hasBirthday:Bool = false

    ///家长类型
    public fileprivate(set) var parentType:Int32! = nil
    public fileprivate(set) var hasParentType:Bool = false

    ///性别
    public fileprivate(set) var gender:Int32! = nil
    public fileprivate(set) var hasGender:Bool = false

    ///头像
    public fileprivate(set) var portrait:String! = nil
    public fileprivate(set) var hasPortrait:Bool = false

    ///用户id
    public fileprivate(set) var userId:Int64! = nil
    public fileprivate(set) var hasUserId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
        }
        if hasUuid {
            try codedOutputStream.writeString(fieldNumber: 2, value:uuid)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 3, value:name)
        }
        if hasClassId {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:classId)
        }
        if hasGradeId {
            try codedOutputStream.writeInt64(fieldNumber: 5, value:gradeId)
        }
        if hasClassNo {
            try codedOutputStream.writeString(fieldNumber: 6, value:classNo)
        }
        if hasBirthday {
            try codedOutputStream.writeInt64(fieldNumber: 7, value:birthday)
        }
        if hasParentType {
            try codedOutputStream.writeInt32(fieldNumber: 8, value:parentType)
        }
        if hasGender {
            try codedOutputStream.writeInt32(fieldNumber: 9, value:gender)
        }
        if hasPortrait {
            try codedOutputStream.writeString(fieldNumber: 10, value:portrait)
        }
        if hasUserId {
            try codedOutputStream.writeInt64(fieldNumber: 11, value:userId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasId {
            serialize_size += id.computeInt64Size(fieldNumber: 1)
        }
        if hasUuid {
            serialize_size += uuid.computeStringSize(fieldNumber: 2)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 3)
        }
        if hasClassId {
            serialize_size += classId.computeInt64Size(fieldNumber: 4)
        }
        if hasGradeId {
            serialize_size += gradeId.computeInt64Size(fieldNumber: 5)
        }
        if hasClassNo {
            serialize_size += classNo.computeStringSize(fieldNumber: 6)
        }
        if hasBirthday {
            serialize_size += birthday.computeInt64Size(fieldNumber: 7)
        }
        if hasParentType {
            serialize_size += parentType.computeInt32Size(fieldNumber: 8)
        }
        if hasGender {
            serialize_size += gender.computeInt32Size(fieldNumber: 9)
        }
        if hasPortrait {
            serialize_size += portrait.computeStringSize(fieldNumber: 10)
        }
        if hasUserId {
            serialize_size += userId.computeInt64Size(fieldNumber: 11)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Pbstudent.Builder {
        return Pbstudent.classBuilder() as! Pbstudent.Builder
    }
    public func getBuilder() -> Pbstudent.Builder {
        return classBuilder() as! Pbstudent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbstudent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbstudent.Builder()
    }
    public func toBuilder() throws -> Pbstudent.Builder {
        return try Pbstudent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pbstudent) throws -> Pbstudent.Builder {
        return try Pbstudent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasId {
            jsonMap["id"] = "\(id!)"
        }
        if hasUuid {
            jsonMap["uuid"] = uuid
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasClassId {
            jsonMap["classId"] = "\(classId!)"
        }
        if hasGradeId {
            jsonMap["gradeId"] = "\(gradeId!)"
        }
        if hasClassNo {
            jsonMap["classNo"] = classNo
        }
        if hasBirthday {
            jsonMap["birthday"] = "\(birthday!)"
        }
        if hasParentType {
            jsonMap["parentType"] = Int(parentType)
        }
        if hasGender {
            jsonMap["gender"] = Int(gender)
        }
        if hasPortrait {
            jsonMap["portrait"] = portrait
        }
        if hasUserId {
            jsonMap["userId"] = "\(userId!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pbstudent {
        return try Pbstudent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pbstudent {
        return try Pbstudent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasId {
            output += "\(indent) id: \(id) \n"
        }
        if hasUuid {
            output += "\(indent) uuid: \(uuid) \n"
        }
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        if hasClassId {
            output += "\(indent) classId: \(classId) \n"
        }
        if hasGradeId {
            output += "\(indent) gradeId: \(gradeId) \n"
        }
        if hasClassNo {
            output += "\(indent) classNo: \(classNo) \n"
        }
        if hasBirthday {
            output += "\(indent) birthday: \(birthday) \n"
        }
        if hasParentType {
            output += "\(indent) parentType: \(parentType) \n"
        }
        if hasGender {
            output += "\(indent) gender: \(gender) \n"
        }
        if hasPortrait {
            output += "\(indent) portrait: \(portrait) \n"
        }
        if hasUserId {
            output += "\(indent) userId: \(userId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
                hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUuid {
                hashCode = (hashCode &* 31) &+ uuid.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasClassId {
                hashCode = (hashCode &* 31) &+ classId.hashValue
            }
            if hasGradeId {
                hashCode = (hashCode &* 31) &+ gradeId.hashValue
            }
            if hasClassNo {
                hashCode = (hashCode &* 31) &+ classNo.hashValue
            }
            if hasBirthday {
                hashCode = (hashCode &* 31) &+ birthday.hashValue
            }
            if hasParentType {
                hashCode = (hashCode &* 31) &+ parentType.hashValue
            }
            if hasGender {
                hashCode = (hashCode &* 31) &+ gender.hashValue
            }
            if hasPortrait {
                hashCode = (hashCode &* 31) &+ portrait.hashValue
            }
            if hasUserId {
                hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pbstudent"
    }
    override public func className() -> String {
        return "Pbstudent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Pbstudent = Pbstudent()
        public func getMessage() -> Pbstudent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var id:Int64 {
            get {
                return builderResult.id
            }
            set (value) {
                builderResult.hasId = true
                builderResult.id = value
            }
        }
        public var hasId:Bool {
            get {
                return builderResult.hasId
            }
        }
        @discardableResult
        public func setId(_ value:Int64) -> Pbstudent.Builder {
            self.id = value
            return self
        }
        @discardableResult
        public func clearId() -> Pbstudent.Builder{
            builderResult.hasId = false
            builderResult.id = nil
            return self
        }
        ///唯一统一标示符
        public var uuid:String {
            get {
                return builderResult.uuid
            }
            set (value) {
                builderResult.hasUuid = true
                builderResult.uuid = value
            }
        }
        public var hasUuid:Bool {
            get {
                return builderResult.hasUuid
            }
        }
        @discardableResult
        public func setUuid(_ value:String) -> Pbstudent.Builder {
            self.uuid = value
            return self
        }
        @discardableResult
        public func clearUuid() -> Pbstudent.Builder{
            builderResult.hasUuid = false
            builderResult.uuid = nil
            return self
        }
        ///名称
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> Pbstudent.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> Pbstudent.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        ///班级
        public var classId:Int64 {
            get {
                return builderResult.classId
            }
            set (value) {
                builderResult.hasClassId = true
                builderResult.classId = value
            }
        }
        public var hasClassId:Bool {
            get {
                return builderResult.hasClassId
            }
        }
        @discardableResult
        public func setClassId(_ value:Int64) -> Pbstudent.Builder {
            self.classId = value
            return self
        }
        @discardableResult
        public func clearClassId() -> Pbstudent.Builder{
            builderResult.hasClassId = false
            builderResult.classId = nil
            return self
        }
        ///年级
        public var gradeId:Int64 {
            get {
                return builderResult.gradeId
            }
            set (value) {
                builderResult.hasGradeId = true
                builderResult.gradeId = value
            }
        }
        public var hasGradeId:Bool {
            get {
                return builderResult.hasGradeId
            }
        }
        @discardableResult
        public func setGradeId(_ value:Int64) -> Pbstudent.Builder {
            self.gradeId = value
            return self
        }
        @discardableResult
        public func clearGradeId() -> Pbstudent.Builder{
            builderResult.hasGradeId = false
            builderResult.gradeId = nil
            return self
        }
        ///班级码
        public var classNo:String {
            get {
                return builderResult.classNo
            }
            set (value) {
                builderResult.hasClassNo = true
                builderResult.classNo = value
            }
        }
        public var hasClassNo:Bool {
            get {
                return builderResult.hasClassNo
            }
        }
        @discardableResult
        public func setClassNo(_ value:String) -> Pbstudent.Builder {
            self.classNo = value
            return self
        }
        @discardableResult
        public func clearClassNo() -> Pbstudent.Builder{
            builderResult.hasClassNo = false
            builderResult.classNo = nil
            return self
        }
        ///出生日期
        public var birthday:Int64 {
            get {
                return builderResult.birthday
            }
            set (value) {
                builderResult.hasBirthday = true
                builderResult.birthday = value
            }
        }
        public var hasBirthday:Bool {
            get {
                return builderResult.hasBirthday
            }
        }
        @discardableResult
        public func setBirthday(_ value:Int64) -> Pbstudent.Builder {
            self.birthday = value
            return self
        }
        @discardableResult
        public func clearBirthday() -> Pbstudent.Builder{
            builderResult.hasBirthday = false
            builderResult.birthday = nil
            return self
        }
        ///家长类型
        public var parentType:Int32 {
            get {
                return builderResult.parentType
            }
            set (value) {
                builderResult.hasParentType = true
                builderResult.parentType = value
            }
        }
        public var hasParentType:Bool {
            get {
                return builderResult.hasParentType
            }
        }
        @discardableResult
        public func setParentType(_ value:Int32) -> Pbstudent.Builder {
            self.parentType = value
            return self
        }
        @discardableResult
        public func clearParentType() -> Pbstudent.Builder{
            builderResult.hasParentType = false
            builderResult.parentType = nil
            return self
        }
        ///性别
        public var gender:Int32 {
            get {
                return builderResult.gender
            }
            set (value) {
                builderResult.hasGender = true
                builderResult.gender = value
            }
        }
        public var hasGender:Bool {
            get {
                return builderResult.hasGender
            }
        }
        @discardableResult
        public func setGender(_ value:Int32) -> Pbstudent.Builder {
            self.gender = value
            return self
        }
        @discardableResult
        public func clearGender() -> Pbstudent.Builder{
            builderResult.hasGender = false
            builderResult.gender = nil
            return self
        }
        ///头像
        public var portrait:String {
            get {
                return builderResult.portrait
            }
            set (value) {
                builderResult.hasPortrait = true
                builderResult.portrait = value
            }
        }
        public var hasPortrait:Bool {
            get {
                return builderResult.hasPortrait
            }
        }
        @discardableResult
        public func setPortrait(_ value:String) -> Pbstudent.Builder {
            self.portrait = value
            return self
        }
        @discardableResult
        public func clearPortrait() -> Pbstudent.Builder{
            builderResult.hasPortrait = false
            builderResult.portrait = nil
            return self
        }
        ///用户id
        public var userId:Int64 {
            get {
                return builderResult.userId
            }
            set (value) {
                builderResult.hasUserId = true
                builderResult.userId = value
            }
        }
        public var hasUserId:Bool {
            get {
                return builderResult.hasUserId
            }
        }
        @discardableResult
        public func setUserId(_ value:Int64) -> Pbstudent.Builder {
            self.userId = value
            return self
        }
        @discardableResult
        public func clearUserId() -> Pbstudent.Builder{
            builderResult.hasUserId = false
            builderResult.userId = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Pbstudent.Builder {
            builderResult = Pbstudent()
            return self
        }
        override public func clone() throws -> Pbstudent.Builder {
            return try Pbstudent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Pbstudent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Pbstudent {
            let returnMe:Pbstudent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Pbstudent) throws -> Pbstudent.Builder {
            if other == Pbstudent() {
                return self
            }
            if other.hasId {
                id = other.id
            }
            if other.hasUuid {
                uuid = other.uuid
            }
            if other.hasName {
                name = other.name
            }
            if other.hasClassId {
                classId = other.classId
            }
            if other.hasGradeId {
                gradeId = other.gradeId
            }
            if other.hasClassNo {
                classNo = other.classNo
            }
            if other.hasBirthday {
                birthday = other.birthday
            }
            if other.hasParentType {
                parentType = other.parentType
            }
            if other.hasGender {
                gender = other.gender
            }
            if other.hasPortrait {
                portrait = other.portrait
            }
            if other.hasUserId {
                userId = other.userId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pbstudent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbstudent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    id = try codedInputStream.readInt64()

                case 18:
                    uuid = try codedInputStream.readString()

                case 26:
                    name = try codedInputStream.readString()

                case 32:
                    classId = try codedInputStream.readInt64()

                case 40:
                    gradeId = try codedInputStream.readInt64()

                case 50:
                    classNo = try codedInputStream.readString()

                case 56:
                    birthday = try codedInputStream.readInt64()

                case 64:
                    parentType = try codedInputStream.readInt32()

                case 72:
                    gender = try codedInputStream.readInt32()

                case 82:
                    portrait = try codedInputStream.readString()

                case 88:
                    userId = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pbstudent.Builder {
            let resultDecodedBuilder = Pbstudent.Builder()
            if let jsonValueId = jsonMap["id"] as? String {
                resultDecodedBuilder.id = Int64(jsonValueId)!
            } else if let jsonValueId = jsonMap["id"] as? Int {
                resultDecodedBuilder.id = Int64(jsonValueId)
            }
            if let jsonValueUuid = jsonMap["uuid"] as? String {
                resultDecodedBuilder.uuid = jsonValueUuid
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueClassId = jsonMap["classId"] as? String {
                resultDecodedBuilder.classId = Int64(jsonValueClassId)!
            } else if let jsonValueClassId = jsonMap["classId"] as? Int {
                resultDecodedBuilder.classId = Int64(jsonValueClassId)
            }
            if let jsonValueGradeId = jsonMap["gradeId"] as? String {
                resultDecodedBuilder.gradeId = Int64(jsonValueGradeId)!
            } else if let jsonValueGradeId = jsonMap["gradeId"] as? Int {
                resultDecodedBuilder.gradeId = Int64(jsonValueGradeId)
            }
            if let jsonValueClassNo = jsonMap["classNo"] as? String {
                resultDecodedBuilder.classNo = jsonValueClassNo
            }
            if let jsonValueBirthday = jsonMap["birthday"] as? String {
                resultDecodedBuilder.birthday = Int64(jsonValueBirthday)!
            } else if let jsonValueBirthday = jsonMap["birthday"] as? Int {
                resultDecodedBuilder.birthday = Int64(jsonValueBirthday)
            }
            if let jsonValueParentType = jsonMap["parentType"] as? Int {
                resultDecodedBuilder.parentType = Int32(jsonValueParentType)
            } else if let jsonValueParentType = jsonMap["parentType"] as? String {
                resultDecodedBuilder.parentType = Int32(jsonValueParentType)!
            }
            if let jsonValueGender = jsonMap["gender"] as? Int {
                resultDecodedBuilder.gender = Int32(jsonValueGender)
            } else if let jsonValueGender = jsonMap["gender"] as? String {
                resultDecodedBuilder.gender = Int32(jsonValueGender)!
            }
            if let jsonValuePortrait = jsonMap["portrait"] as? String {
                resultDecodedBuilder.portrait = jsonValuePortrait
            }
            if let jsonValueUserId = jsonMap["userId"] as? String {
                resultDecodedBuilder.userId = Int64(jsonValueUserId)!
            } else if let jsonValueUserId = jsonMap["userId"] as? Int {
                resultDecodedBuilder.userId = Int64(jsonValueUserId)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Pbstudent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pbstudent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Pbschool : GeneratedMessage {
    public typealias BuilderType = Pbschool.Builder

    public static func == (lhs: Pbschool, rhs: Pbschool) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
        fieldCheck = fieldCheck && (lhs.hasDomain == rhs.hasDomain) && (!lhs.hasDomain || lhs.domain == rhs.domain)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasYear == rhs.hasYear) && (!lhs.hasYear || lhs.year == rhs.year)
        fieldCheck = fieldCheck && (lhs.hasSemester == rhs.hasSemester) && (!lhs.hasSemester || lhs.semester == rhs.semester)
        fieldCheck = fieldCheck && (lhs.hasIsSchoolCharge == rhs.hasIsSchoolCharge) && (!lhs.hasIsSchoolCharge || lhs.isSchoolCharge == rhs.isSchoolCharge)
        fieldCheck = fieldCheck && (lhs.hasFreeDate == rhs.hasFreeDate) && (!lhs.hasFreeDate || lhs.freeDate == rhs.freeDate)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    ///学校id
    public fileprivate(set) var id:Int64! = nil
    public fileprivate(set) var hasId:Bool = false

    ///学校域名
    public fileprivate(set) var domain:String! = nil
    public fileprivate(set) var hasDomain:Bool = false

    ///学校名称
    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    ///年
    public fileprivate(set) var year:Int64! = nil
    public fileprivate(set) var hasYear:Bool = false

    ///学期
    public fileprivate(set) var semester:Int32! = nil
    public fileprivate(set) var hasSemester:Bool = false

    ///是否收费
    public fileprivate(set) var isSchoolCharge:Int32! = nil
    public fileprivate(set) var hasIsSchoolCharge:Bool = false

    ///免费时间
    public fileprivate(set) var freeDate:Int64! = nil
    public fileprivate(set) var hasFreeDate:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:id)
        }
        if hasDomain {
            try codedOutputStream.writeString(fieldNumber: 2, value:domain)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 3, value:name)
        }
        if hasYear {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:year)
        }
        if hasSemester {
            try codedOutputStream.writeInt32(fieldNumber: 5, value:semester)
        }
        if hasIsSchoolCharge {
            try codedOutputStream.writeInt32(fieldNumber: 6, value:isSchoolCharge)
        }
        if hasFreeDate {
            try codedOutputStream.writeInt64(fieldNumber: 7, value:freeDate)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasId {
            serialize_size += id.computeInt64Size(fieldNumber: 1)
        }
        if hasDomain {
            serialize_size += domain.computeStringSize(fieldNumber: 2)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 3)
        }
        if hasYear {
            serialize_size += year.computeInt64Size(fieldNumber: 4)
        }
        if hasSemester {
            serialize_size += semester.computeInt32Size(fieldNumber: 5)
        }
        if hasIsSchoolCharge {
            serialize_size += isSchoolCharge.computeInt32Size(fieldNumber: 6)
        }
        if hasFreeDate {
            serialize_size += freeDate.computeInt64Size(fieldNumber: 7)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Pbschool.Builder {
        return Pbschool.classBuilder() as! Pbschool.Builder
    }
    public func getBuilder() -> Pbschool.Builder {
        return classBuilder() as! Pbschool.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbschool.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbschool.Builder()
    }
    public func toBuilder() throws -> Pbschool.Builder {
        return try Pbschool.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pbschool) throws -> Pbschool.Builder {
        return try Pbschool.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasId {
            jsonMap["id"] = "\(id!)"
        }
        if hasDomain {
            jsonMap["domain"] = domain
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasYear {
            jsonMap["year"] = "\(year!)"
        }
        if hasSemester {
            jsonMap["semester"] = Int(semester)
        }
        if hasIsSchoolCharge {
            jsonMap["isSchoolCharge"] = Int(isSchoolCharge)
        }
        if hasFreeDate {
            jsonMap["freeDate"] = "\(freeDate!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pbschool {
        return try Pbschool.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pbschool {
        return try Pbschool.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasId {
            output += "\(indent) id: \(id) \n"
        }
        if hasDomain {
            output += "\(indent) domain: \(domain) \n"
        }
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        if hasYear {
            output += "\(indent) year: \(year) \n"
        }
        if hasSemester {
            output += "\(indent) semester: \(semester) \n"
        }
        if hasIsSchoolCharge {
            output += "\(indent) isSchoolCharge: \(isSchoolCharge) \n"
        }
        if hasFreeDate {
            output += "\(indent) freeDate: \(freeDate) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
                hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasDomain {
                hashCode = (hashCode &* 31) &+ domain.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasYear {
                hashCode = (hashCode &* 31) &+ year.hashValue
            }
            if hasSemester {
                hashCode = (hashCode &* 31) &+ semester.hashValue
            }
            if hasIsSchoolCharge {
                hashCode = (hashCode &* 31) &+ isSchoolCharge.hashValue
            }
            if hasFreeDate {
                hashCode = (hashCode &* 31) &+ freeDate.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pbschool"
    }
    override public func className() -> String {
        return "Pbschool"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Pbschool = Pbschool()
        public func getMessage() -> Pbschool {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///学校id
        public var id:Int64 {
            get {
                return builderResult.id
            }
            set (value) {
                builderResult.hasId = true
                builderResult.id = value
            }
        }
        public var hasId:Bool {
            get {
                return builderResult.hasId
            }
        }
        @discardableResult
        public func setId(_ value:Int64) -> Pbschool.Builder {
            self.id = value
            return self
        }
        @discardableResult
        public func clearId() -> Pbschool.Builder{
            builderResult.hasId = false
            builderResult.id = nil
            return self
        }
        ///学校域名
        public var domain:String {
            get {
                return builderResult.domain
            }
            set (value) {
                builderResult.hasDomain = true
                builderResult.domain = value
            }
        }
        public var hasDomain:Bool {
            get {
                return builderResult.hasDomain
            }
        }
        @discardableResult
        public func setDomain(_ value:String) -> Pbschool.Builder {
            self.domain = value
            return self
        }
        @discardableResult
        public func clearDomain() -> Pbschool.Builder{
            builderResult.hasDomain = false
            builderResult.domain = nil
            return self
        }
        ///学校名称
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> Pbschool.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> Pbschool.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        ///年
        public var year:Int64 {
            get {
                return builderResult.year
            }
            set (value) {
                builderResult.hasYear = true
                builderResult.year = value
            }
        }
        public var hasYear:Bool {
            get {
                return builderResult.hasYear
            }
        }
        @discardableResult
        public func setYear(_ value:Int64) -> Pbschool.Builder {
            self.year = value
            return self
        }
        @discardableResult
        public func clearYear() -> Pbschool.Builder{
            builderResult.hasYear = false
            builderResult.year = nil
            return self
        }
        ///学期
        public var semester:Int32 {
            get {
                return builderResult.semester
            }
            set (value) {
                builderResult.hasSemester = true
                builderResult.semester = value
            }
        }
        public var hasSemester:Bool {
            get {
                return builderResult.hasSemester
            }
        }
        @discardableResult
        public func setSemester(_ value:Int32) -> Pbschool.Builder {
            self.semester = value
            return self
        }
        @discardableResult
        public func clearSemester() -> Pbschool.Builder{
            builderResult.hasSemester = false
            builderResult.semester = nil
            return self
        }
        ///是否收费
        public var isSchoolCharge:Int32 {
            get {
                return builderResult.isSchoolCharge
            }
            set (value) {
                builderResult.hasIsSchoolCharge = true
                builderResult.isSchoolCharge = value
            }
        }
        public var hasIsSchoolCharge:Bool {
            get {
                return builderResult.hasIsSchoolCharge
            }
        }
        @discardableResult
        public func setIsSchoolCharge(_ value:Int32) -> Pbschool.Builder {
            self.isSchoolCharge = value
            return self
        }
        @discardableResult
        public func clearIsSchoolCharge() -> Pbschool.Builder{
            builderResult.hasIsSchoolCharge = false
            builderResult.isSchoolCharge = nil
            return self
        }
        ///免费时间
        public var freeDate:Int64 {
            get {
                return builderResult.freeDate
            }
            set (value) {
                builderResult.hasFreeDate = true
                builderResult.freeDate = value
            }
        }
        public var hasFreeDate:Bool {
            get {
                return builderResult.hasFreeDate
            }
        }
        @discardableResult
        public func setFreeDate(_ value:Int64) -> Pbschool.Builder {
            self.freeDate = value
            return self
        }
        @discardableResult
        public func clearFreeDate() -> Pbschool.Builder{
            builderResult.hasFreeDate = false
            builderResult.freeDate = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Pbschool.Builder {
            builderResult = Pbschool()
            return self
        }
        override public func clone() throws -> Pbschool.Builder {
            return try Pbschool.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Pbschool {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Pbschool {
            let returnMe:Pbschool = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Pbschool) throws -> Pbschool.Builder {
            if other == Pbschool() {
                return self
            }
            if other.hasId {
                id = other.id
            }
            if other.hasDomain {
                domain = other.domain
            }
            if other.hasName {
                name = other.name
            }
            if other.hasYear {
                year = other.year
            }
            if other.hasSemester {
                semester = other.semester
            }
            if other.hasIsSchoolCharge {
                isSchoolCharge = other.isSchoolCharge
            }
            if other.hasFreeDate {
                freeDate = other.freeDate
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pbschool.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbschool.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    id = try codedInputStream.readInt64()

                case 18:
                    domain = try codedInputStream.readString()

                case 26:
                    name = try codedInputStream.readString()

                case 32:
                    year = try codedInputStream.readInt64()

                case 40:
                    semester = try codedInputStream.readInt32()

                case 48:
                    isSchoolCharge = try codedInputStream.readInt32()

                case 56:
                    freeDate = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pbschool.Builder {
            let resultDecodedBuilder = Pbschool.Builder()
            if let jsonValueId = jsonMap["id"] as? String {
                resultDecodedBuilder.id = Int64(jsonValueId)!
            } else if let jsonValueId = jsonMap["id"] as? Int {
                resultDecodedBuilder.id = Int64(jsonValueId)
            }
            if let jsonValueDomain = jsonMap["domain"] as? String {
                resultDecodedBuilder.domain = jsonValueDomain
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueYear = jsonMap["year"] as? String {
                resultDecodedBuilder.year = Int64(jsonValueYear)!
            } else if let jsonValueYear = jsonMap["year"] as? Int {
                resultDecodedBuilder.year = Int64(jsonValueYear)
            }
            if let jsonValueSemester = jsonMap["semester"] as? Int {
                resultDecodedBuilder.semester = Int32(jsonValueSemester)
            } else if let jsonValueSemester = jsonMap["semester"] as? String {
                resultDecodedBuilder.semester = Int32(jsonValueSemester)!
            }
            if let jsonValueIsSchoolCharge = jsonMap["isSchoolCharge"] as? Int {
                resultDecodedBuilder.isSchoolCharge = Int32(jsonValueIsSchoolCharge)
            } else if let jsonValueIsSchoolCharge = jsonMap["isSchoolCharge"] as? String {
                resultDecodedBuilder.isSchoolCharge = Int32(jsonValueIsSchoolCharge)!
            }
            if let jsonValueFreeDate = jsonMap["freeDate"] as? String {
                resultDecodedBuilder.freeDate = Int64(jsonValueFreeDate)!
            } else if let jsonValueFreeDate = jsonMap["freeDate"] as? Int {
                resultDecodedBuilder.freeDate = Int64(jsonValueFreeDate)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Pbschool.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pbschool.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class PbsystemCfg : GeneratedMessage {
    public typealias BuilderType = PbsystemCfg.Builder

    public static func == (lhs: PbsystemCfg, rhs: PbsystemCfg) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasDiskCap == rhs.hasDiskCap) && (!lhs.hasDiskCap || lhs.diskCap == rhs.diskCap)
        fieldCheck = fieldCheck && (lhs.hasUploadLimit == rhs.hasUploadLimit) && (!lhs.hasUploadLimit || lhs.uploadLimit == rhs.uploadLimit)
        fieldCheck = fieldCheck && (lhs.hasClassPb == rhs.hasClassPb) && (!lhs.hasClassPb || lhs.classPb == rhs.classPb)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    ///网盘容量
    public fileprivate(set) var diskCap:String! = nil
    public fileprivate(set) var hasDiskCap:Bool = false

    ///上传限制
    public fileprivate(set) var uploadLimit:String! = nil
    public fileprivate(set) var hasUploadLimit:Bool = false

    public fileprivate(set) var classPb:Pbclass!
    public fileprivate(set) var hasClassPb:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasDiskCap {
            try codedOutputStream.writeString(fieldNumber: 1, value:diskCap)
        }
        if hasUploadLimit {
            try codedOutputStream.writeString(fieldNumber: 2, value:uploadLimit)
        }
        if hasClassPb {
            try codedOutputStream.writeMessage(fieldNumber: 3, value:classPb)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasDiskCap {
            serialize_size += diskCap.computeStringSize(fieldNumber: 1)
        }
        if hasUploadLimit {
            serialize_size += uploadLimit.computeStringSize(fieldNumber: 2)
        }
        if hasClassPb {
            if let varSizeclassPb = classPb?.computeMessageSize(fieldNumber: 3) {
                serialize_size += varSizeclassPb
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> PbsystemCfg.Builder {
        return PbsystemCfg.classBuilder() as! PbsystemCfg.Builder
    }
    public func getBuilder() -> PbsystemCfg.Builder {
        return classBuilder() as! PbsystemCfg.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PbsystemCfg.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PbsystemCfg.Builder()
    }
    public func toBuilder() throws -> PbsystemCfg.Builder {
        return try PbsystemCfg.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:PbsystemCfg) throws -> PbsystemCfg.Builder {
        return try PbsystemCfg.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasDiskCap {
            jsonMap["diskCap"] = diskCap
        }
        if hasUploadLimit {
            jsonMap["uploadLimit"] = uploadLimit
        }
        if hasClassPb {
            jsonMap["classPb"] = try classPb.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasDiskCap {
            output += "\(indent) diskCap: \(diskCap) \n"
        }
        if hasUploadLimit {
            output += "\(indent) uploadLimit: \(uploadLimit) \n"
        }
        if hasClassPb {
            output += "\(indent) classPb {\n"
            if let outDescClassPb = classPb {
                output += try outDescClassPb.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDiskCap {
                hashCode = (hashCode &* 31) &+ diskCap.hashValue
            }
            if hasUploadLimit {
                hashCode = (hashCode &* 31) &+ uploadLimit.hashValue
            }
            if hasClassPb {
                if let hashValueclassPb = classPb?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueclassPb
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "PbsystemCfg"
    }
    override public func className() -> String {
        return "PbsystemCfg"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:PbsystemCfg = PbsystemCfg()
        public func getMessage() -> PbsystemCfg {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///网盘容量
        public var diskCap:String {
            get {
                return builderResult.diskCap
            }
            set (value) {
                builderResult.hasDiskCap = true
                builderResult.diskCap = value
            }
        }
        public var hasDiskCap:Bool {
            get {
                return builderResult.hasDiskCap
            }
        }
        @discardableResult
        public func setDiskCap(_ value:String) -> PbsystemCfg.Builder {
            self.diskCap = value
            return self
        }
        @discardableResult
        public func clearDiskCap() -> PbsystemCfg.Builder{
            builderResult.hasDiskCap = false
            builderResult.diskCap = nil
            return self
        }
        ///上传限制
        public var uploadLimit:String {
            get {
                return builderResult.uploadLimit
            }
            set (value) {
                builderResult.hasUploadLimit = true
                builderResult.uploadLimit = value
            }
        }
        public var hasUploadLimit:Bool {
            get {
                return builderResult.hasUploadLimit
            }
        }
        @discardableResult
        public func setUploadLimit(_ value:String) -> PbsystemCfg.Builder {
            self.uploadLimit = value
            return self
        }
        @discardableResult
        public func clearUploadLimit() -> PbsystemCfg.Builder{
            builderResult.hasUploadLimit = false
            builderResult.uploadLimit = nil
            return self
        }
        ///班级
        public var classPb:Pbclass! {
            get {
                if classPbBuilder_ != nil {
                    builderResult.classPb = classPbBuilder_.getMessage()
                }
                return builderResult.classPb
            }
            set (value) {
                builderResult.hasClassPb = value != nil
                builderResult.classPb = value
            }
        }
        public var hasClassPb:Bool {
            get {
                return builderResult.hasClassPb
            }
        }
        fileprivate var classPbBuilder_:Pbclass.Builder! {
            didSet {
                builderResult.hasClassPb = true
            }
        }
        public func getClassPbBuilder() -> Pbclass.Builder {
            if classPbBuilder_ == nil {
                classPbBuilder_ = Pbclass.Builder()
                builderResult.classPb = classPbBuilder_.getMessage()
                if classPb != nil {
                    try! classPbBuilder_.mergeFrom(other: classPb)
                }
            }
            return classPbBuilder_
        }
        @discardableResult
        public func setClassPb(_ value:Pbclass!) -> PbsystemCfg.Builder {
            self.classPb = value
            return self
        }
        @discardableResult
        public func mergeClassPb(value:Pbclass) throws -> PbsystemCfg.Builder {
            if builderResult.hasClassPb {
                builderResult.classPb = try Pbclass.builderWithPrototype(prototype:builderResult.classPb).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.classPb = value
            }
            builderResult.hasClassPb = true
            return self
        }
        @discardableResult
        public func clearClassPb() -> PbsystemCfg.Builder {
            classPbBuilder_ = nil
            builderResult.hasClassPb = false
            builderResult.classPb = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> PbsystemCfg.Builder {
            builderResult = PbsystemCfg()
            return self
        }
        override public func clone() throws -> PbsystemCfg.Builder {
            return try PbsystemCfg.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> PbsystemCfg {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> PbsystemCfg {
            let returnMe:PbsystemCfg = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:PbsystemCfg) throws -> PbsystemCfg.Builder {
            if other == PbsystemCfg() {
                return self
            }
            if other.hasDiskCap {
                diskCap = other.diskCap
            }
            if other.hasUploadLimit {
                uploadLimit = other.uploadLimit
            }
            if (other.hasClassPb) {
                try mergeClassPb(value: other.classPb)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> PbsystemCfg.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PbsystemCfg.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    diskCap = try codedInputStream.readString()

                case 18:
                    uploadLimit = try codedInputStream.readString()

                case 26:
                    let subBuilder:Pbclass.Builder = Pbclass.Builder()
                    if hasClassPb {
                        try subBuilder.mergeFrom(other: classPb)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    classPb = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> PbsystemCfg.Builder {
            let resultDecodedBuilder = PbsystemCfg.Builder()
            if let jsonValueDiskCap = jsonMap["diskCap"] as? String {
                resultDecodedBuilder.diskCap = jsonValueDiskCap
            }
            if let jsonValueUploadLimit = jsonMap["uploadLimit"] as? String {
                resultDecodedBuilder.uploadLimit = jsonValueUploadLimit
            }
            if let jsonValueClassPb = jsonMap["classPb"] as? Dictionary<String,Any> {
                resultDecodedBuilder.classPb = try Pbclass.Builder.decodeToBuilder(jsonMap:jsonValueClassPb).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> PbsystemCfg.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try PbsystemCfg.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class PbfuncCtrl : GeneratedMessage {
    public typealias BuilderType = PbfuncCtrl.Builder

    public static func == (lhs: PbfuncCtrl, rhs: PbfuncCtrl) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasSchoolId == rhs.hasSchoolId) && (!lhs.hasSchoolId || lhs.schoolId == rhs.schoolId)
        fieldCheck = fieldCheck && (lhs.hasFuncCode == rhs.hasFuncCode) && (!lhs.hasFuncCode || lhs.funcCode == rhs.funcCode)
        fieldCheck = fieldCheck && (lhs.hasAndroidStatus == rhs.hasAndroidStatus) && (!lhs.hasAndroidStatus || lhs.androidStatus == rhs.androidStatus)
        fieldCheck = fieldCheck && (lhs.hasIosStatus == rhs.hasIosStatus) && (!lhs.hasIosStatus || lhs.iosStatus == rhs.iosStatus)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    ///学校id
    public fileprivate(set) var schoolId:Int64! = nil
    public fileprivate(set) var hasSchoolId:Bool = false

    ///功能code
    public fileprivate(set) var funcCode:String! = nil
    public fileprivate(set) var hasFuncCode:Bool = false

    ///状态
    public fileprivate(set) var androidStatus:Int32! = nil
    public fileprivate(set) var hasAndroidStatus:Bool = false

    ///状态
    public fileprivate(set) var iosStatus:Int32! = nil
    public fileprivate(set) var hasIosStatus:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasSchoolId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:schoolId)
        }
        if hasFuncCode {
            try codedOutputStream.writeString(fieldNumber: 2, value:funcCode)
        }
        if hasAndroidStatus {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:androidStatus)
        }
        if hasIosStatus {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:iosStatus)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasSchoolId {
            serialize_size += schoolId.computeInt64Size(fieldNumber: 1)
        }
        if hasFuncCode {
            serialize_size += funcCode.computeStringSize(fieldNumber: 2)
        }
        if hasAndroidStatus {
            serialize_size += androidStatus.computeInt32Size(fieldNumber: 3)
        }
        if hasIosStatus {
            serialize_size += iosStatus.computeInt32Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> PbfuncCtrl.Builder {
        return PbfuncCtrl.classBuilder() as! PbfuncCtrl.Builder
    }
    public func getBuilder() -> PbfuncCtrl.Builder {
        return classBuilder() as! PbfuncCtrl.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PbfuncCtrl.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PbfuncCtrl.Builder()
    }
    public func toBuilder() throws -> PbfuncCtrl.Builder {
        return try PbfuncCtrl.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:PbfuncCtrl) throws -> PbfuncCtrl.Builder {
        return try PbfuncCtrl.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasSchoolId {
            jsonMap["schoolId"] = "\(schoolId!)"
        }
        if hasFuncCode {
            jsonMap["funcCode"] = funcCode
        }
        if hasAndroidStatus {
            jsonMap["androidStatus"] = Int(androidStatus)
        }
        if hasIosStatus {
            jsonMap["iosStatus"] = Int(iosStatus)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasSchoolId {
            output += "\(indent) schoolId: \(schoolId) \n"
        }
        if hasFuncCode {
            output += "\(indent) funcCode: \(funcCode) \n"
        }
        if hasAndroidStatus {
            output += "\(indent) androidStatus: \(androidStatus) \n"
        }
        if hasIosStatus {
            output += "\(indent) iosStatus: \(iosStatus) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSchoolId {
                hashCode = (hashCode &* 31) &+ schoolId.hashValue
            }
            if hasFuncCode {
                hashCode = (hashCode &* 31) &+ funcCode.hashValue
            }
            if hasAndroidStatus {
                hashCode = (hashCode &* 31) &+ androidStatus.hashValue
            }
            if hasIosStatus {
                hashCode = (hashCode &* 31) &+ iosStatus.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "PbfuncCtrl"
    }
    override public func className() -> String {
        return "PbfuncCtrl"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:PbfuncCtrl = PbfuncCtrl()
        public func getMessage() -> PbfuncCtrl {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///学校id
        public var schoolId:Int64 {
            get {
                return builderResult.schoolId
            }
            set (value) {
                builderResult.hasSchoolId = true
                builderResult.schoolId = value
            }
        }
        public var hasSchoolId:Bool {
            get {
                return builderResult.hasSchoolId
            }
        }
        @discardableResult
        public func setSchoolId(_ value:Int64) -> PbfuncCtrl.Builder {
            self.schoolId = value
            return self
        }
        @discardableResult
        public func clearSchoolId() -> PbfuncCtrl.Builder{
            builderResult.hasSchoolId = false
            builderResult.schoolId = nil
            return self
        }
        ///功能code
        public var funcCode:String {
            get {
                return builderResult.funcCode
            }
            set (value) {
                builderResult.hasFuncCode = true
                builderResult.funcCode = value
            }
        }
        public var hasFuncCode:Bool {
            get {
                return builderResult.hasFuncCode
            }
        }
        @discardableResult
        public func setFuncCode(_ value:String) -> PbfuncCtrl.Builder {
            self.funcCode = value
            return self
        }
        @discardableResult
        public func clearFuncCode() -> PbfuncCtrl.Builder{
            builderResult.hasFuncCode = false
            builderResult.funcCode = nil
            return self
        }
        ///状态
        public var androidStatus:Int32 {
            get {
                return builderResult.androidStatus
            }
            set (value) {
                builderResult.hasAndroidStatus = true
                builderResult.androidStatus = value
            }
        }
        public var hasAndroidStatus:Bool {
            get {
                return builderResult.hasAndroidStatus
            }
        }
        @discardableResult
        public func setAndroidStatus(_ value:Int32) -> PbfuncCtrl.Builder {
            self.androidStatus = value
            return self
        }
        @discardableResult
        public func clearAndroidStatus() -> PbfuncCtrl.Builder{
            builderResult.hasAndroidStatus = false
            builderResult.androidStatus = nil
            return self
        }
        ///状态
        public var iosStatus:Int32 {
            get {
                return builderResult.iosStatus
            }
            set (value) {
                builderResult.hasIosStatus = true
                builderResult.iosStatus = value
            }
        }
        public var hasIosStatus:Bool {
            get {
                return builderResult.hasIosStatus
            }
        }
        @discardableResult
        public func setIosStatus(_ value:Int32) -> PbfuncCtrl.Builder {
            self.iosStatus = value
            return self
        }
        @discardableResult
        public func clearIosStatus() -> PbfuncCtrl.Builder{
            builderResult.hasIosStatus = false
            builderResult.iosStatus = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> PbfuncCtrl.Builder {
            builderResult = PbfuncCtrl()
            return self
        }
        override public func clone() throws -> PbfuncCtrl.Builder {
            return try PbfuncCtrl.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> PbfuncCtrl {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> PbfuncCtrl {
            let returnMe:PbfuncCtrl = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:PbfuncCtrl) throws -> PbfuncCtrl.Builder {
            if other == PbfuncCtrl() {
                return self
            }
            if other.hasSchoolId {
                schoolId = other.schoolId
            }
            if other.hasFuncCode {
                funcCode = other.funcCode
            }
            if other.hasAndroidStatus {
                androidStatus = other.androidStatus
            }
            if other.hasIosStatus {
                iosStatus = other.iosStatus
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> PbfuncCtrl.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PbfuncCtrl.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    schoolId = try codedInputStream.readInt64()

                case 18:
                    funcCode = try codedInputStream.readString()

                case 24:
                    androidStatus = try codedInputStream.readInt32()

                case 32:
                    iosStatus = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> PbfuncCtrl.Builder {
            let resultDecodedBuilder = PbfuncCtrl.Builder()
            if let jsonValueSchoolId = jsonMap["schoolId"] as? String {
                resultDecodedBuilder.schoolId = Int64(jsonValueSchoolId)!
            } else if let jsonValueSchoolId = jsonMap["schoolId"] as? Int {
                resultDecodedBuilder.schoolId = Int64(jsonValueSchoolId)
            }
            if let jsonValueFuncCode = jsonMap["funcCode"] as? String {
                resultDecodedBuilder.funcCode = jsonValueFuncCode
            }
            if let jsonValueAndroidStatus = jsonMap["androidStatus"] as? Int {
                resultDecodedBuilder.androidStatus = Int32(jsonValueAndroidStatus)
            } else if let jsonValueAndroidStatus = jsonMap["androidStatus"] as? String {
                resultDecodedBuilder.androidStatus = Int32(jsonValueAndroidStatus)!
            }
            if let jsonValueIosStatus = jsonMap["iosStatus"] as? Int {
                resultDecodedBuilder.iosStatus = Int32(jsonValueIosStatus)
            } else if let jsonValueIosStatus = jsonMap["iosStatus"] as? String {
                resultDecodedBuilder.iosStatus = Int32(jsonValueIosStatus)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> PbfuncCtrl.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try PbfuncCtrl.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Pbuser : GeneratedMessage {
    public typealias BuilderType = Pbuser.Builder

    public static func == (lhs: Pbuser, rhs: Pbuser) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUid == rhs.hasUid) && (!lhs.hasUid || lhs.uid == rhs.uid)
        fieldCheck = fieldCheck && (lhs.hasSchoolId == rhs.hasSchoolId) && (!lhs.hasSchoolId || lhs.schoolId == rhs.schoolId)
        fieldCheck = fieldCheck && (lhs.hasUuid == rhs.hasUuid) && (!lhs.hasUuid || lhs.uuid == rhs.uuid)
        fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
        fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasUserType == rhs.hasUserType) && (!lhs.hasUserType || lhs.userType == rhs.userType)
        fieldCheck = fieldCheck && (lhs.hasPhaseId == rhs.hasPhaseId) && (!lhs.hasPhaseId || lhs.phaseId == rhs.phaseId)
        fieldCheck = fieldCheck && (lhs.hasGender == rhs.hasGender) && (!lhs.hasGender || lhs.gender == rhs.gender)
        fieldCheck = fieldCheck && (lhs.hasMobile == rhs.hasMobile) && (!lhs.hasMobile || lhs.mobile == rhs.mobile)
        fieldCheck = fieldCheck && (lhs.hasAddress == rhs.hasAddress) && (!lhs.hasAddress || lhs.address == rhs.address)
        fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
        fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
        fieldCheck = fieldCheck && (lhs.hasSchoolName == rhs.hasSchoolName) && (!lhs.hasSchoolName || lhs.schoolName == rhs.schoolName)
        fieldCheck = fieldCheck && (lhs.hasPortrait == rhs.hasPortrait) && (!lhs.hasPortrait || lhs.portrait == rhs.portrait)
        fieldCheck = fieldCheck && (lhs.hasParent == rhs.hasParent) && (!lhs.hasParent || lhs.parent == rhs.parent)
        fieldCheck = fieldCheck && (lhs.hasTeacher == rhs.hasTeacher) && (!lhs.hasTeacher || lhs.teacher == rhs.teacher)
        fieldCheck = fieldCheck && (lhs.hasSchool == rhs.hasSchool) && (!lhs.hasSchool || lhs.school == rhs.school)
        fieldCheck = fieldCheck && (lhs.funcCtrlPb == rhs.funcCtrlPb)
        fieldCheck = fieldCheck && (lhs.hasHasInitPwd == rhs.hasHasInitPwd) && (!lhs.hasHasInitPwd || lhs.hasInitPwd == rhs.hasInitPwd)
        fieldCheck = fieldCheck && (lhs.hasBucketDomain == rhs.hasBucketDomain) && (!lhs.hasBucketDomain || lhs.bucketDomain == rhs.bucketDomain)
        fieldCheck = fieldCheck && (lhs.hasUptoken == rhs.hasUptoken) && (!lhs.hasUptoken || lhs.uptoken == rhs.uptoken)
        fieldCheck = fieldCheck && (lhs.hasGroupStatus == rhs.hasGroupStatus) && (!lhs.hasGroupStatus || lhs.groupStatus == rhs.groupStatus)
        fieldCheck = fieldCheck && (lhs.hasIsMember == rhs.hasIsMember) && (!lhs.hasIsMember || lhs.isMember == rhs.isMember)
        fieldCheck = fieldCheck && (lhs.hasDeadline == rhs.hasDeadline) && (!lhs.hasDeadline || lhs.deadline == rhs.deadline)
        fieldCheck = fieldCheck && (lhs.hasSystemConfigPb == rhs.hasSystemConfigPb) && (!lhs.hasSystemConfigPb || lhs.systemConfigPb == rhs.systemConfigPb)
        fieldCheck = fieldCheck && (lhs.hasDiskCap == rhs.hasDiskCap) && (!lhs.hasDiskCap || lhs.diskCap == rhs.diskCap)
        fieldCheck = fieldCheck && (lhs.hasDean == rhs.hasDean) && (!lhs.hasDean || lhs.dean == rhs.dean)
        fieldCheck = fieldCheck && (lhs.hasIsTourist == rhs.hasIsTourist) && (!lhs.hasIsTourist || lhs.isTourist == rhs.isTourist)
        fieldCheck = fieldCheck && (lhs.hasRcToken == rhs.hasRcToken) && (!lhs.hasRcToken || lhs.rcToken == rhs.rcToken)
        fieldCheck = fieldCheck && (lhs.hasIsUserCharge == rhs.hasIsUserCharge) && (!lhs.hasIsUserCharge || lhs.isUserCharge == rhs.isUserCharge)
        fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
        fieldCheck = fieldCheck && (lhs.hasSessionToken == rhs.hasSessionToken) && (!lhs.hasSessionToken || lhs.sessionToken == rhs.sessionToken)
        fieldCheck = fieldCheck && (lhs.hasRepassword == rhs.hasRepassword) && (!lhs.hasRepassword || lhs.repassword == rhs.repassword)
        fieldCheck = fieldCheck && (lhs.hasCutClassId == rhs.hasCutClassId) && (!lhs.hasCutClassId || lhs.cutClassId == rhs.cutClassId)
        fieldCheck = fieldCheck && (lhs.hasSigninstamp == rhs.hasSigninstamp) && (!lhs.hasSigninstamp || lhs.signinstamp == rhs.signinstamp)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    ///用户id
    public fileprivate(set) var uid:Int64! = nil
    public fileprivate(set) var hasUid:Bool = false

    ///学校id
    public fileprivate(set) var schoolId:Int64! = nil
    public fileprivate(set) var hasSchoolId:Bool = false

    ///唯一统一标示符
    public fileprivate(set) var uuid:String! = nil
    public fileprivate(set) var hasUuid:Bool = false

    ///用户名
    public fileprivate(set) var username:String! = nil
    public fileprivate(set) var hasUsername:Bool = false

    ///用户名
    public fileprivate(set) var password:String! = nil
    public fileprivate(set) var hasPassword:Bool = false

    ///中文名
    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var userType:PbuserRole = PbuserRole.visitor
    public fileprivate(set) var hasUserType:Bool = false
    ///学段id
    public fileprivate(set) var phaseId:Int64! = nil
    public fileprivate(set) var hasPhaseId:Bool = false

    ///性别1:男，2：女
    public fileprivate(set) var gender:Int32! = nil
    public fileprivate(set) var hasGender:Bool = false

    ///电话
    public fileprivate(set) var mobile:String! = nil
    public fileprivate(set) var hasMobile:Bool = false

    ///地址
    public fileprivate(set) var address:String! = nil
    public fileprivate(set) var hasAddress:Bool = false

    ///email
    public fileprivate(set) var email:String! = nil
    public fileprivate(set) var hasEmail:Bool = false

    ///token
    public fileprivate(set) var token:String! = nil
    public fileprivate(set) var hasToken:Bool = false

    ///学校名称
    public fileprivate(set) var schoolName:String! = nil
    public fileprivate(set) var hasSchoolName:Bool = false

    ///头像
    public fileprivate(set) var portrait:String! = nil
    public fileprivate(set) var hasPortrait:Bool = false

    public fileprivate(set) var parent:Pbparent!
    public fileprivate(set) var hasParent:Bool = false
    public fileprivate(set) var teacher:Pbteacher!
    public fileprivate(set) var hasTeacher:Bool = false
    public fileprivate(set) var school:Pbschool!
    public fileprivate(set) var hasSchool:Bool = false
    public fileprivate(set) var funcCtrlPb:Array<PbfuncCtrl>  = Array<PbfuncCtrl>()
    public fileprivate(set) var hasInitPwd:Int32! = nil
    public fileprivate(set) var hasHasInitPwd:Bool = false

    ///七牛域名
    public fileprivate(set) var bucketDomain:String! = nil
    public fileprivate(set) var hasBucketDomain:Bool = false

    ///七牛上传token
    public fileprivate(set) var uptoken:String! = nil
    public fileprivate(set) var hasUptoken:Bool = false

    ///群聊开关状态
    public fileprivate(set) var groupStatus:Int32! = nil
    public fileprivate(set) var hasGroupStatus:Bool = false

    ///是否是会员
    public fileprivate(set) var isMember:Int32! = nil
    public fileprivate(set) var hasIsMember:Bool = false

    ///会员截止日期
    public fileprivate(set) var deadline:Int64! = nil
    public fileprivate(set) var hasDeadline:Bool = false

    public fileprivate(set) var systemConfigPb:PbsystemCfg!
    public fileprivate(set) var hasSystemConfigPb:Bool = false
    ///当前网盘容量
    public fileprivate(set) var diskCap:Int64! = nil
    public fileprivate(set) var hasDiskCap:Bool = false

    public fileprivate(set) var dean:Pbdean!
    public fileprivate(set) var hasDean:Bool = false
    ///是否是游客
    public fileprivate(set) var isTourist:Int32! = nil
    public fileprivate(set) var hasIsTourist:Bool = false

    ///融云token
    public fileprivate(set) var rcToken:String! = nil
    public fileprivate(set) var hasRcToken:Bool = false

    ///判断用户是否需要进入收费页面
    public fileprivate(set) var isUserCharge:Int32! = nil
    public fileprivate(set) var hasIsUserCharge:Bool = false

    ///验证码
    public fileprivate(set) var code:String! = nil
    public fileprivate(set) var hasCode:Bool = false

    ///用户登录后授权token
    public fileprivate(set) var sessionToken:String! = nil
    public fileprivate(set) var hasSessionToken:Bool = false

    ///新密码
    public fileprivate(set) var repassword:String! = nil
    public fileprivate(set) var hasRepassword:Bool = false

    ///当前classId
    public fileprivate(set) var cutClassId:Int64! = nil
    public fileprivate(set) var hasCutClassId:Bool = false

    ///登录时间戳
    public fileprivate(set) var signinstamp:Int64! = nil
    public fileprivate(set) var hasSigninstamp:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUid {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:uid)
        }
        if hasSchoolId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:schoolId)
        }
        if hasUuid {
            try codedOutputStream.writeString(fieldNumber: 3, value:uuid)
        }
        if hasUsername {
            try codedOutputStream.writeString(fieldNumber: 4, value:username)
        }
        if hasPassword {
            try codedOutputStream.writeString(fieldNumber: 5, value:password)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 6, value:name)
        }
        if hasUserType {
            try codedOutputStream.writeEnum(fieldNumber: 7, value:userType.rawValue)
        }
        if hasPhaseId {
            try codedOutputStream.writeInt64(fieldNumber: 8, value:phaseId)
        }
        if hasGender {
            try codedOutputStream.writeInt32(fieldNumber: 9, value:gender)
        }
        if hasMobile {
            try codedOutputStream.writeString(fieldNumber: 10, value:mobile)
        }
        if hasAddress {
            try codedOutputStream.writeString(fieldNumber: 11, value:address)
        }
        if hasEmail {
            try codedOutputStream.writeString(fieldNumber: 12, value:email)
        }
        if hasToken {
            try codedOutputStream.writeString(fieldNumber: 13, value:token)
        }
        if hasSchoolName {
            try codedOutputStream.writeString(fieldNumber: 14, value:schoolName)
        }
        if hasPortrait {
            try codedOutputStream.writeString(fieldNumber: 15, value:portrait)
        }
        if hasParent {
            try codedOutputStream.writeMessage(fieldNumber: 16, value:parent)
        }
        if hasTeacher {
            try codedOutputStream.writeMessage(fieldNumber: 17, value:teacher)
        }
        if hasSchool {
            try codedOutputStream.writeMessage(fieldNumber: 18, value:school)
        }
        for oneElementFuncCtrlPb in funcCtrlPb {
              try codedOutputStream.writeMessage(fieldNumber: 19, value:oneElementFuncCtrlPb)
        }
        if hasHasInitPwd {
            try codedOutputStream.writeInt32(fieldNumber: 20, value:hasInitPwd)
        }
        if hasBucketDomain {
            try codedOutputStream.writeString(fieldNumber: 21, value:bucketDomain)
        }
        if hasUptoken {
            try codedOutputStream.writeString(fieldNumber: 22, value:uptoken)
        }
        if hasGroupStatus {
            try codedOutputStream.writeInt32(fieldNumber: 23, value:groupStatus)
        }
        if hasIsMember {
            try codedOutputStream.writeInt32(fieldNumber: 24, value:isMember)
        }
        if hasDeadline {
            try codedOutputStream.writeInt64(fieldNumber: 25, value:deadline)
        }
        if hasSystemConfigPb {
            try codedOutputStream.writeMessage(fieldNumber: 26, value:systemConfigPb)
        }
        if hasDiskCap {
            try codedOutputStream.writeInt64(fieldNumber: 27, value:diskCap)
        }
        if hasDean {
            try codedOutputStream.writeMessage(fieldNumber: 28, value:dean)
        }
        if hasIsTourist {
            try codedOutputStream.writeInt32(fieldNumber: 29, value:isTourist)
        }
        if hasRcToken {
            try codedOutputStream.writeString(fieldNumber: 30, value:rcToken)
        }
        if hasIsUserCharge {
            try codedOutputStream.writeInt32(fieldNumber: 31, value:isUserCharge)
        }
        if hasCode {
            try codedOutputStream.writeString(fieldNumber: 32, value:code)
        }
        if hasSessionToken {
            try codedOutputStream.writeString(fieldNumber: 33, value:sessionToken)
        }
        if hasRepassword {
            try codedOutputStream.writeString(fieldNumber: 34, value:repassword)
        }
        if hasCutClassId {
            try codedOutputStream.writeInt64(fieldNumber: 35, value:cutClassId)
        }
        if hasSigninstamp {
            try codedOutputStream.writeInt64(fieldNumber: 36, value:signinstamp)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUid {
            serialize_size += uid.computeInt64Size(fieldNumber: 1)
        }
        if hasSchoolId {
            serialize_size += schoolId.computeInt64Size(fieldNumber: 2)
        }
        if hasUuid {
            serialize_size += uuid.computeStringSize(fieldNumber: 3)
        }
        if hasUsername {
            serialize_size += username.computeStringSize(fieldNumber: 4)
        }
        if hasPassword {
            serialize_size += password.computeStringSize(fieldNumber: 5)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 6)
        }
        if (hasUserType) {
            serialize_size += userType.rawValue.computeEnumSize(fieldNumber: 7)
        }
        if hasPhaseId {
            serialize_size += phaseId.computeInt64Size(fieldNumber: 8)
        }
        if hasGender {
            serialize_size += gender.computeInt32Size(fieldNumber: 9)
        }
        if hasMobile {
            serialize_size += mobile.computeStringSize(fieldNumber: 10)
        }
        if hasAddress {
            serialize_size += address.computeStringSize(fieldNumber: 11)
        }
        if hasEmail {
            serialize_size += email.computeStringSize(fieldNumber: 12)
        }
        if hasToken {
            serialize_size += token.computeStringSize(fieldNumber: 13)
        }
        if hasSchoolName {
            serialize_size += schoolName.computeStringSize(fieldNumber: 14)
        }
        if hasPortrait {
            serialize_size += portrait.computeStringSize(fieldNumber: 15)
        }
        if hasParent {
            if let varSizeparent = parent?.computeMessageSize(fieldNumber: 16) {
                serialize_size += varSizeparent
            }
        }
        if hasTeacher {
            if let varSizeteacher = teacher?.computeMessageSize(fieldNumber: 17) {
                serialize_size += varSizeteacher
            }
        }
        if hasSchool {
            if let varSizeschool = school?.computeMessageSize(fieldNumber: 18) {
                serialize_size += varSizeschool
            }
        }
        for oneElementFuncCtrlPb in funcCtrlPb {
            serialize_size += oneElementFuncCtrlPb.computeMessageSize(fieldNumber: 19)
        }
        if hasHasInitPwd {
            serialize_size += hasInitPwd.computeInt32Size(fieldNumber: 20)
        }
        if hasBucketDomain {
            serialize_size += bucketDomain.computeStringSize(fieldNumber: 21)
        }
        if hasUptoken {
            serialize_size += uptoken.computeStringSize(fieldNumber: 22)
        }
        if hasGroupStatus {
            serialize_size += groupStatus.computeInt32Size(fieldNumber: 23)
        }
        if hasIsMember {
            serialize_size += isMember.computeInt32Size(fieldNumber: 24)
        }
        if hasDeadline {
            serialize_size += deadline.computeInt64Size(fieldNumber: 25)
        }
        if hasSystemConfigPb {
            if let varSizesystemConfigPb = systemConfigPb?.computeMessageSize(fieldNumber: 26) {
                serialize_size += varSizesystemConfigPb
            }
        }
        if hasDiskCap {
            serialize_size += diskCap.computeInt64Size(fieldNumber: 27)
        }
        if hasDean {
            if let varSizedean = dean?.computeMessageSize(fieldNumber: 28) {
                serialize_size += varSizedean
            }
        }
        if hasIsTourist {
            serialize_size += isTourist.computeInt32Size(fieldNumber: 29)
        }
        if hasRcToken {
            serialize_size += rcToken.computeStringSize(fieldNumber: 30)
        }
        if hasIsUserCharge {
            serialize_size += isUserCharge.computeInt32Size(fieldNumber: 31)
        }
        if hasCode {
            serialize_size += code.computeStringSize(fieldNumber: 32)
        }
        if hasSessionToken {
            serialize_size += sessionToken.computeStringSize(fieldNumber: 33)
        }
        if hasRepassword {
            serialize_size += repassword.computeStringSize(fieldNumber: 34)
        }
        if hasCutClassId {
            serialize_size += cutClassId.computeInt64Size(fieldNumber: 35)
        }
        if hasSigninstamp {
            serialize_size += signinstamp.computeInt64Size(fieldNumber: 36)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Pbuser.Builder {
        return Pbuser.classBuilder() as! Pbuser.Builder
    }
    public func getBuilder() -> Pbuser.Builder {
        return classBuilder() as! Pbuser.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbuser.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Pbuser.Builder()
    }
    public func toBuilder() throws -> Pbuser.Builder {
        return try Pbuser.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pbuser) throws -> Pbuser.Builder {
        return try Pbuser.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUid {
            jsonMap["uid"] = "\(uid!)"
        }
        if hasSchoolId {
            jsonMap["schoolId"] = "\(schoolId!)"
        }
        if hasUuid {
            jsonMap["uuid"] = uuid
        }
        if hasUsername {
            jsonMap["username"] = username
        }
        if hasPassword {
            jsonMap["password"] = password
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasUserType {
            jsonMap["userType"] = userType.toString()
        }
        if hasPhaseId {
            jsonMap["phaseId"] = "\(phaseId!)"
        }
        if hasGender {
            jsonMap["gender"] = Int(gender)
        }
        if hasMobile {
            jsonMap["mobile"] = mobile
        }
        if hasAddress {
            jsonMap["address"] = address
        }
        if hasEmail {
            jsonMap["email"] = email
        }
        if hasToken {
            jsonMap["token"] = token
        }
        if hasSchoolName {
            jsonMap["schoolName"] = schoolName
        }
        if hasPortrait {
            jsonMap["portrait"] = portrait
        }
        if hasParent {
            jsonMap["parent"] = try parent.encode()
        }
        if hasTeacher {
            jsonMap["teacher"] = try teacher.encode()
        }
        if hasSchool {
            jsonMap["school"] = try school.encode()
        }
        if !funcCtrlPb.isEmpty {
            var jsonArrayFuncCtrlPb:Array<Dictionary<String,Any>> = []
            for oneValueFuncCtrlPb in funcCtrlPb {
                let ecodedMessageFuncCtrlPb = try oneValueFuncCtrlPb.encode()
                jsonArrayFuncCtrlPb.append(ecodedMessageFuncCtrlPb)
            }
            jsonMap["funcCtrlPb"] = jsonArrayFuncCtrlPb
        }
        if hasHasInitPwd {
            jsonMap["hasInitPwd"] = Int(hasInitPwd)
        }
        if hasBucketDomain {
            jsonMap["bucketDomain"] = bucketDomain
        }
        if hasUptoken {
            jsonMap["uptoken"] = uptoken
        }
        if hasGroupStatus {
            jsonMap["groupStatus"] = Int(groupStatus)
        }
        if hasIsMember {
            jsonMap["isMember"] = Int(isMember)
        }
        if hasDeadline {
            jsonMap["deadline"] = "\(deadline!)"
        }
        if hasSystemConfigPb {
            jsonMap["systemConfigPb"] = try systemConfigPb.encode()
        }
        if hasDiskCap {
            jsonMap["diskCap"] = "\(diskCap!)"
        }
        if hasDean {
            jsonMap["dean"] = try dean.encode()
        }
        if hasIsTourist {
            jsonMap["isTourist"] = Int(isTourist)
        }
        if hasRcToken {
            jsonMap["rcToken"] = rcToken
        }
        if hasIsUserCharge {
            jsonMap["isUserCharge"] = Int(isUserCharge)
        }
        if hasCode {
            jsonMap["code"] = code
        }
        if hasSessionToken {
            jsonMap["sessionToken"] = sessionToken
        }
        if hasRepassword {
            jsonMap["repassword"] = repassword
        }
        if hasCutClassId {
            jsonMap["cutClassId"] = "\(cutClassId!)"
        }
        if hasSigninstamp {
            jsonMap["signinstamp"] = "\(signinstamp!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pbuser {
        return try Pbuser.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pbuser {
        return try Pbuser.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUid {
            output += "\(indent) uid: \(uid) \n"
        }
        if hasSchoolId {
            output += "\(indent) schoolId: \(schoolId) \n"
        }
        if hasUuid {
            output += "\(indent) uuid: \(uuid) \n"
        }
        if hasUsername {
            output += "\(indent) username: \(username) \n"
        }
        if hasPassword {
            output += "\(indent) password: \(password) \n"
        }
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        if (hasUserType) {
            output += "\(indent) userType: \(userType.description)\n"
        }
        if hasPhaseId {
            output += "\(indent) phaseId: \(phaseId) \n"
        }
        if hasGender {
            output += "\(indent) gender: \(gender) \n"
        }
        if hasMobile {
            output += "\(indent) mobile: \(mobile) \n"
        }
        if hasAddress {
            output += "\(indent) address: \(address) \n"
        }
        if hasEmail {
            output += "\(indent) email: \(email) \n"
        }
        if hasToken {
            output += "\(indent) token: \(token) \n"
        }
        if hasSchoolName {
            output += "\(indent) schoolName: \(schoolName) \n"
        }
        if hasPortrait {
            output += "\(indent) portrait: \(portrait) \n"
        }
        if hasParent {
            output += "\(indent) parent {\n"
            if let outDescParent = parent {
                output += try outDescParent.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasTeacher {
            output += "\(indent) teacher {\n"
            if let outDescTeacher = teacher {
                output += try outDescTeacher.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasSchool {
            output += "\(indent) school {\n"
            if let outDescSchool = school {
                output += try outDescSchool.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var funcCtrlPbElementIndex:Int = 0
        for oneElementFuncCtrlPb in funcCtrlPb {
            output += "\(indent) funcCtrlPb[\(funcCtrlPbElementIndex)] {\n"
            output += try oneElementFuncCtrlPb.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            funcCtrlPbElementIndex += 1
        }
        if hasHasInitPwd {
            output += "\(indent) hasInitPwd: \(hasInitPwd) \n"
        }
        if hasBucketDomain {
            output += "\(indent) bucketDomain: \(bucketDomain) \n"
        }
        if hasUptoken {
            output += "\(indent) uptoken: \(uptoken) \n"
        }
        if hasGroupStatus {
            output += "\(indent) groupStatus: \(groupStatus) \n"
        }
        if hasIsMember {
            output += "\(indent) isMember: \(isMember) \n"
        }
        if hasDeadline {
            output += "\(indent) deadline: \(deadline) \n"
        }
        if hasSystemConfigPb {
            output += "\(indent) systemConfigPb {\n"
            if let outDescSystemConfigPb = systemConfigPb {
                output += try outDescSystemConfigPb.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasDiskCap {
            output += "\(indent) diskCap: \(diskCap) \n"
        }
        if hasDean {
            output += "\(indent) dean {\n"
            if let outDescDean = dean {
                output += try outDescDean.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIsTourist {
            output += "\(indent) isTourist: \(isTourist) \n"
        }
        if hasRcToken {
            output += "\(indent) rcToken: \(rcToken) \n"
        }
        if hasIsUserCharge {
            output += "\(indent) isUserCharge: \(isUserCharge) \n"
        }
        if hasCode {
            output += "\(indent) code: \(code) \n"
        }
        if hasSessionToken {
            output += "\(indent) sessionToken: \(sessionToken) \n"
        }
        if hasRepassword {
            output += "\(indent) repassword: \(repassword) \n"
        }
        if hasCutClassId {
            output += "\(indent) cutClassId: \(cutClassId) \n"
        }
        if hasSigninstamp {
            output += "\(indent) signinstamp: \(signinstamp) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUid {
                hashCode = (hashCode &* 31) &+ uid.hashValue
            }
            if hasSchoolId {
                hashCode = (hashCode &* 31) &+ schoolId.hashValue
            }
            if hasUuid {
                hashCode = (hashCode &* 31) &+ uuid.hashValue
            }
            if hasUsername {
                hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasPassword {
                hashCode = (hashCode &* 31) &+ password.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasUserType {
                 hashCode = (hashCode &* 31) &+ userType.hashValue
            }
            if hasPhaseId {
                hashCode = (hashCode &* 31) &+ phaseId.hashValue
            }
            if hasGender {
                hashCode = (hashCode &* 31) &+ gender.hashValue
            }
            if hasMobile {
                hashCode = (hashCode &* 31) &+ mobile.hashValue
            }
            if hasAddress {
                hashCode = (hashCode &* 31) &+ address.hashValue
            }
            if hasEmail {
                hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasToken {
                hashCode = (hashCode &* 31) &+ token.hashValue
            }
            if hasSchoolName {
                hashCode = (hashCode &* 31) &+ schoolName.hashValue
            }
            if hasPortrait {
                hashCode = (hashCode &* 31) &+ portrait.hashValue
            }
            if hasParent {
                if let hashValueparent = parent?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueparent
                }
            }
            if hasTeacher {
                if let hashValueteacher = teacher?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueteacher
                }
            }
            if hasSchool {
                if let hashValueschool = school?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueschool
                }
            }
            for oneElementFuncCtrlPb in funcCtrlPb {
                hashCode = (hashCode &* 31) &+ oneElementFuncCtrlPb.hashValue
            }
            if hasHasInitPwd {
                hashCode = (hashCode &* 31) &+ hasInitPwd.hashValue
            }
            if hasBucketDomain {
                hashCode = (hashCode &* 31) &+ bucketDomain.hashValue
            }
            if hasUptoken {
                hashCode = (hashCode &* 31) &+ uptoken.hashValue
            }
            if hasGroupStatus {
                hashCode = (hashCode &* 31) &+ groupStatus.hashValue
            }
            if hasIsMember {
                hashCode = (hashCode &* 31) &+ isMember.hashValue
            }
            if hasDeadline {
                hashCode = (hashCode &* 31) &+ deadline.hashValue
            }
            if hasSystemConfigPb {
                if let hashValuesystemConfigPb = systemConfigPb?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesystemConfigPb
                }
            }
            if hasDiskCap {
                hashCode = (hashCode &* 31) &+ diskCap.hashValue
            }
            if hasDean {
                if let hashValuedean = dean?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedean
                }
            }
            if hasIsTourist {
                hashCode = (hashCode &* 31) &+ isTourist.hashValue
            }
            if hasRcToken {
                hashCode = (hashCode &* 31) &+ rcToken.hashValue
            }
            if hasIsUserCharge {
                hashCode = (hashCode &* 31) &+ isUserCharge.hashValue
            }
            if hasCode {
                hashCode = (hashCode &* 31) &+ code.hashValue
            }
            if hasSessionToken {
                hashCode = (hashCode &* 31) &+ sessionToken.hashValue
            }
            if hasRepassword {
                hashCode = (hashCode &* 31) &+ repassword.hashValue
            }
            if hasCutClassId {
                hashCode = (hashCode &* 31) &+ cutClassId.hashValue
            }
            if hasSigninstamp {
                hashCode = (hashCode &* 31) &+ signinstamp.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pbuser"
    }
    override public func className() -> String {
        return "Pbuser"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Pbuser = Pbuser()
        public func getMessage() -> Pbuser {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        ///用户id
        public var uid:Int64 {
            get {
                return builderResult.uid
            }
            set (value) {
                builderResult.hasUid = true
                builderResult.uid = value
            }
        }
        public var hasUid:Bool {
            get {
                return builderResult.hasUid
            }
        }
        @discardableResult
        public func setUid(_ value:Int64) -> Pbuser.Builder {
            self.uid = value
            return self
        }
        @discardableResult
        public func clearUid() -> Pbuser.Builder{
            builderResult.hasUid = false
            builderResult.uid = nil
            return self
        }
        ///学校id
        public var schoolId:Int64 {
            get {
                return builderResult.schoolId
            }
            set (value) {
                builderResult.hasSchoolId = true
                builderResult.schoolId = value
            }
        }
        public var hasSchoolId:Bool {
            get {
                return builderResult.hasSchoolId
            }
        }
        @discardableResult
        public func setSchoolId(_ value:Int64) -> Pbuser.Builder {
            self.schoolId = value
            return self
        }
        @discardableResult
        public func clearSchoolId() -> Pbuser.Builder{
            builderResult.hasSchoolId = false
            builderResult.schoolId = nil
            return self
        }
        ///唯一统一标示符
        public var uuid:String {
            get {
                return builderResult.uuid
            }
            set (value) {
                builderResult.hasUuid = true
                builderResult.uuid = value
            }
        }
        public var hasUuid:Bool {
            get {
                return builderResult.hasUuid
            }
        }
        @discardableResult
        public func setUuid(_ value:String) -> Pbuser.Builder {
            self.uuid = value
            return self
        }
        @discardableResult
        public func clearUuid() -> Pbuser.Builder{
            builderResult.hasUuid = false
            builderResult.uuid = nil
            return self
        }
        ///用户名
        public var username:String {
            get {
                return builderResult.username
            }
            set (value) {
                builderResult.hasUsername = true
                builderResult.username = value
            }
        }
        public var hasUsername:Bool {
            get {
                return builderResult.hasUsername
            }
        }
        @discardableResult
        public func setUsername(_ value:String) -> Pbuser.Builder {
            self.username = value
            return self
        }
        @discardableResult
        public func clearUsername() -> Pbuser.Builder{
            builderResult.hasUsername = false
            builderResult.username = nil
            return self
        }
        ///用户名
        public var password:String {
            get {
                return builderResult.password
            }
            set (value) {
                builderResult.hasPassword = true
                builderResult.password = value
            }
        }
        public var hasPassword:Bool {
            get {
                return builderResult.hasPassword
            }
        }
        @discardableResult
        public func setPassword(_ value:String) -> Pbuser.Builder {
            self.password = value
            return self
        }
        @discardableResult
        public func clearPassword() -> Pbuser.Builder{
            builderResult.hasPassword = false
            builderResult.password = nil
            return self
        }
        ///中文名
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> Pbuser.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> Pbuser.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        ///用户类型(1老师;2学生;3家长;4教务)
            public var userType:PbuserRole {
                get {
                    return builderResult.userType
                }
                set (value) {
                    builderResult.hasUserType = true
                    builderResult.userType = value
                }
            }
            public var hasUserType:Bool{
                get {
                    return builderResult.hasUserType
                }
            }
        @discardableResult
            public func setUserType(_ value:PbuserRole) -> Pbuser.Builder {
              self.userType = value
              return self
            }
        @discardableResult
            public func clearUserType() -> Pbuser.Builder {
               builderResult.hasUserType = false
               builderResult.userType = .visitor
               return self
            }
        ///学段id
        public var phaseId:Int64 {
            get {
                return builderResult.phaseId
            }
            set (value) {
                builderResult.hasPhaseId = true
                builderResult.phaseId = value
            }
        }
        public var hasPhaseId:Bool {
            get {
                return builderResult.hasPhaseId
            }
        }
        @discardableResult
        public func setPhaseId(_ value:Int64) -> Pbuser.Builder {
            self.phaseId = value
            return self
        }
        @discardableResult
        public func clearPhaseId() -> Pbuser.Builder{
            builderResult.hasPhaseId = false
            builderResult.phaseId = nil
            return self
        }
        ///性别1:男，2：女
        public var gender:Int32 {
            get {
                return builderResult.gender
            }
            set (value) {
                builderResult.hasGender = true
                builderResult.gender = value
            }
        }
        public var hasGender:Bool {
            get {
                return builderResult.hasGender
            }
        }
        @discardableResult
        public func setGender(_ value:Int32) -> Pbuser.Builder {
            self.gender = value
            return self
        }
        @discardableResult
        public func clearGender() -> Pbuser.Builder{
            builderResult.hasGender = false
            builderResult.gender = nil
            return self
        }
        ///电话
        public var mobile:String {
            get {
                return builderResult.mobile
            }
            set (value) {
                builderResult.hasMobile = true
                builderResult.mobile = value
            }
        }
        public var hasMobile:Bool {
            get {
                return builderResult.hasMobile
            }
        }
        @discardableResult
        public func setMobile(_ value:String) -> Pbuser.Builder {
            self.mobile = value
            return self
        }
        @discardableResult
        public func clearMobile() -> Pbuser.Builder{
            builderResult.hasMobile = false
            builderResult.mobile = nil
            return self
        }
        ///地址
        public var address:String {
            get {
                return builderResult.address
            }
            set (value) {
                builderResult.hasAddress = true
                builderResult.address = value
            }
        }
        public var hasAddress:Bool {
            get {
                return builderResult.hasAddress
            }
        }
        @discardableResult
        public func setAddress(_ value:String) -> Pbuser.Builder {
            self.address = value
            return self
        }
        @discardableResult
        public func clearAddress() -> Pbuser.Builder{
            builderResult.hasAddress = false
            builderResult.address = nil
            return self
        }
        ///email
        public var email:String {
            get {
                return builderResult.email
            }
            set (value) {
                builderResult.hasEmail = true
                builderResult.email = value
            }
        }
        public var hasEmail:Bool {
            get {
                return builderResult.hasEmail
            }
        }
        @discardableResult
        public func setEmail(_ value:String) -> Pbuser.Builder {
            self.email = value
            return self
        }
        @discardableResult
        public func clearEmail() -> Pbuser.Builder{
            builderResult.hasEmail = false
            builderResult.email = nil
            return self
        }
        ///token
        public var token:String {
            get {
                return builderResult.token
            }
            set (value) {
                builderResult.hasToken = true
                builderResult.token = value
            }
        }
        public var hasToken:Bool {
            get {
                return builderResult.hasToken
            }
        }
        @discardableResult
        public func setToken(_ value:String) -> Pbuser.Builder {
            self.token = value
            return self
        }
        @discardableResult
        public func clearToken() -> Pbuser.Builder{
            builderResult.hasToken = false
            builderResult.token = nil
            return self
        }
        ///学校名称
        public var schoolName:String {
            get {
                return builderResult.schoolName
            }
            set (value) {
                builderResult.hasSchoolName = true
                builderResult.schoolName = value
            }
        }
        public var hasSchoolName:Bool {
            get {
                return builderResult.hasSchoolName
            }
        }
        @discardableResult
        public func setSchoolName(_ value:String) -> Pbuser.Builder {
            self.schoolName = value
            return self
        }
        @discardableResult
        public func clearSchoolName() -> Pbuser.Builder{
            builderResult.hasSchoolName = false
            builderResult.schoolName = nil
            return self
        }
        ///头像
        public var portrait:String {
            get {
                return builderResult.portrait
            }
            set (value) {
                builderResult.hasPortrait = true
                builderResult.portrait = value
            }
        }
        public var hasPortrait:Bool {
            get {
                return builderResult.hasPortrait
            }
        }
        @discardableResult
        public func setPortrait(_ value:String) -> Pbuser.Builder {
            self.portrait = value
            return self
        }
        @discardableResult
        public func clearPortrait() -> Pbuser.Builder{
            builderResult.hasPortrait = false
            builderResult.portrait = nil
            return self
        }
        public var parent:Pbparent! {
            get {
                if parentBuilder_ != nil {
                    builderResult.parent = parentBuilder_.getMessage()
                }
                return builderResult.parent
            }
            set (value) {
                builderResult.hasParent = value != nil
                builderResult.parent = value
            }
        }
        public var hasParent:Bool {
            get {
                return builderResult.hasParent
            }
        }
        fileprivate var parentBuilder_:Pbparent.Builder! {
            didSet {
                builderResult.hasParent = true
            }
        }
        public func getParentBuilder() -> Pbparent.Builder {
            if parentBuilder_ == nil {
                parentBuilder_ = Pbparent.Builder()
                builderResult.parent = parentBuilder_.getMessage()
                if parent != nil {
                    try! parentBuilder_.mergeFrom(other: parent)
                }
            }
            return parentBuilder_
        }
        @discardableResult
        public func setParent(_ value:Pbparent!) -> Pbuser.Builder {
            self.parent = value
            return self
        }
        @discardableResult
        public func mergeParent(value:Pbparent) throws -> Pbuser.Builder {
            if builderResult.hasParent {
                builderResult.parent = try Pbparent.builderWithPrototype(prototype:builderResult.parent).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.parent = value
            }
            builderResult.hasParent = true
            return self
        }
        @discardableResult
        public func clearParent() -> Pbuser.Builder {
            parentBuilder_ = nil
            builderResult.hasParent = false
            builderResult.parent = nil
            return self
        }
        public var teacher:Pbteacher! {
            get {
                if teacherBuilder_ != nil {
                    builderResult.teacher = teacherBuilder_.getMessage()
                }
                return builderResult.teacher
            }
            set (value) {
                builderResult.hasTeacher = value != nil
                builderResult.teacher = value
            }
        }
        public var hasTeacher:Bool {
            get {
                return builderResult.hasTeacher
            }
        }
        fileprivate var teacherBuilder_:Pbteacher.Builder! {
            didSet {
                builderResult.hasTeacher = true
            }
        }
        public func getTeacherBuilder() -> Pbteacher.Builder {
            if teacherBuilder_ == nil {
                teacherBuilder_ = Pbteacher.Builder()
                builderResult.teacher = teacherBuilder_.getMessage()
                if teacher != nil {
                    try! teacherBuilder_.mergeFrom(other: teacher)
                }
            }
            return teacherBuilder_
        }
        @discardableResult
        public func setTeacher(_ value:Pbteacher!) -> Pbuser.Builder {
            self.teacher = value
            return self
        }
        @discardableResult
        public func mergeTeacher(value:Pbteacher) throws -> Pbuser.Builder {
            if builderResult.hasTeacher {
                builderResult.teacher = try Pbteacher.builderWithPrototype(prototype:builderResult.teacher).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.teacher = value
            }
            builderResult.hasTeacher = true
            return self
        }
        @discardableResult
        public func clearTeacher() -> Pbuser.Builder {
            teacherBuilder_ = nil
            builderResult.hasTeacher = false
            builderResult.teacher = nil
            return self
        }
        public var school:Pbschool! {
            get {
                if schoolBuilder_ != nil {
                    builderResult.school = schoolBuilder_.getMessage()
                }
                return builderResult.school
            }
            set (value) {
                builderResult.hasSchool = value != nil
                builderResult.school = value
            }
        }
        public var hasSchool:Bool {
            get {
                return builderResult.hasSchool
            }
        }
        fileprivate var schoolBuilder_:Pbschool.Builder! {
            didSet {
                builderResult.hasSchool = true
            }
        }
        public func getSchoolBuilder() -> Pbschool.Builder {
            if schoolBuilder_ == nil {
                schoolBuilder_ = Pbschool.Builder()
                builderResult.school = schoolBuilder_.getMessage()
                if school != nil {
                    try! schoolBuilder_.mergeFrom(other: school)
                }
            }
            return schoolBuilder_
        }
        @discardableResult
        public func setSchool(_ value:Pbschool!) -> Pbuser.Builder {
            self.school = value
            return self
        }
        @discardableResult
        public func mergeSchool(value:Pbschool) throws -> Pbuser.Builder {
            if builderResult.hasSchool {
                builderResult.school = try Pbschool.builderWithPrototype(prototype:builderResult.school).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.school = value
            }
            builderResult.hasSchool = true
            return self
        }
        @discardableResult
        public func clearSchool() -> Pbuser.Builder {
            schoolBuilder_ = nil
            builderResult.hasSchool = false
            builderResult.school = nil
            return self
        }
        public var funcCtrlPb:Array<PbfuncCtrl> {
            get {
                return builderResult.funcCtrlPb
            }
            set (value) {
                builderResult.funcCtrlPb = value
            }
        }
        @discardableResult
        public func setFuncCtrlPb(_ value:Array<PbfuncCtrl>) -> Pbuser.Builder {
            self.funcCtrlPb = value
            return self
        }
        @discardableResult
        public func clearFuncCtrlPb() -> Pbuser.Builder {
            builderResult.funcCtrlPb.removeAll(keepingCapacity: false)
            return self
        }
        public var hasInitPwd:Int32 {
            get {
                return builderResult.hasInitPwd
            }
            set (value) {
                builderResult.hasHasInitPwd = true
                builderResult.hasInitPwd = value
            }
        }
        public var hasHasInitPwd:Bool {
            get {
                return builderResult.hasHasInitPwd
            }
        }
        @discardableResult
        public func setHasInitPwd(_ value:Int32) -> Pbuser.Builder {
            self.hasInitPwd = value
            return self
        }
        @discardableResult
        public func clearHasInitPwd() -> Pbuser.Builder{
            builderResult.hasHasInitPwd = false
            builderResult.hasInitPwd = nil
            return self
        }
        ///七牛域名
        public var bucketDomain:String {
            get {
                return builderResult.bucketDomain
            }
            set (value) {
                builderResult.hasBucketDomain = true
                builderResult.bucketDomain = value
            }
        }
        public var hasBucketDomain:Bool {
            get {
                return builderResult.hasBucketDomain
            }
        }
        @discardableResult
        public func setBucketDomain(_ value:String) -> Pbuser.Builder {
            self.bucketDomain = value
            return self
        }
        @discardableResult
        public func clearBucketDomain() -> Pbuser.Builder{
            builderResult.hasBucketDomain = false
            builderResult.bucketDomain = nil
            return self
        }
        ///七牛上传token
        public var uptoken:String {
            get {
                return builderResult.uptoken
            }
            set (value) {
                builderResult.hasUptoken = true
                builderResult.uptoken = value
            }
        }
        public var hasUptoken:Bool {
            get {
                return builderResult.hasUptoken
            }
        }
        @discardableResult
        public func setUptoken(_ value:String) -> Pbuser.Builder {
            self.uptoken = value
            return self
        }
        @discardableResult
        public func clearUptoken() -> Pbuser.Builder{
            builderResult.hasUptoken = false
            builderResult.uptoken = nil
            return self
        }
        ///群聊开关状态
        public var groupStatus:Int32 {
            get {
                return builderResult.groupStatus
            }
            set (value) {
                builderResult.hasGroupStatus = true
                builderResult.groupStatus = value
            }
        }
        public var hasGroupStatus:Bool {
            get {
                return builderResult.hasGroupStatus
            }
        }
        @discardableResult
        public func setGroupStatus(_ value:Int32) -> Pbuser.Builder {
            self.groupStatus = value
            return self
        }
        @discardableResult
        public func clearGroupStatus() -> Pbuser.Builder{
            builderResult.hasGroupStatus = false
            builderResult.groupStatus = nil
            return self
        }
        ///是否是会员
        public var isMember:Int32 {
            get {
                return builderResult.isMember
            }
            set (value) {
                builderResult.hasIsMember = true
                builderResult.isMember = value
            }
        }
        public var hasIsMember:Bool {
            get {
                return builderResult.hasIsMember
            }
        }
        @discardableResult
        public func setIsMember(_ value:Int32) -> Pbuser.Builder {
            self.isMember = value
            return self
        }
        @discardableResult
        public func clearIsMember() -> Pbuser.Builder{
            builderResult.hasIsMember = false
            builderResult.isMember = nil
            return self
        }
        ///会员截止日期
        public var deadline:Int64 {
            get {
                return builderResult.deadline
            }
            set (value) {
                builderResult.hasDeadline = true
                builderResult.deadline = value
            }
        }
        public var hasDeadline:Bool {
            get {
                return builderResult.hasDeadline
            }
        }
        @discardableResult
        public func setDeadline(_ value:Int64) -> Pbuser.Builder {
            self.deadline = value
            return self
        }
        @discardableResult
        public func clearDeadline() -> Pbuser.Builder{
            builderResult.hasDeadline = false
            builderResult.deadline = nil
            return self
        }
        ///系统配置
        public var systemConfigPb:PbsystemCfg! {
            get {
                if systemConfigPbBuilder_ != nil {
                    builderResult.systemConfigPb = systemConfigPbBuilder_.getMessage()
                }
                return builderResult.systemConfigPb
            }
            set (value) {
                builderResult.hasSystemConfigPb = value != nil
                builderResult.systemConfigPb = value
            }
        }
        public var hasSystemConfigPb:Bool {
            get {
                return builderResult.hasSystemConfigPb
            }
        }
        fileprivate var systemConfigPbBuilder_:PbsystemCfg.Builder! {
            didSet {
                builderResult.hasSystemConfigPb = true
            }
        }
        public func getSystemConfigPbBuilder() -> PbsystemCfg.Builder {
            if systemConfigPbBuilder_ == nil {
                systemConfigPbBuilder_ = PbsystemCfg.Builder()
                builderResult.systemConfigPb = systemConfigPbBuilder_.getMessage()
                if systemConfigPb != nil {
                    try! systemConfigPbBuilder_.mergeFrom(other: systemConfigPb)
                }
            }
            return systemConfigPbBuilder_
        }
        @discardableResult
        public func setSystemConfigPb(_ value:PbsystemCfg!) -> Pbuser.Builder {
            self.systemConfigPb = value
            return self
        }
        @discardableResult
        public func mergeSystemConfigPb(value:PbsystemCfg) throws -> Pbuser.Builder {
            if builderResult.hasSystemConfigPb {
                builderResult.systemConfigPb = try PbsystemCfg.builderWithPrototype(prototype:builderResult.systemConfigPb).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.systemConfigPb = value
            }
            builderResult.hasSystemConfigPb = true
            return self
        }
        @discardableResult
        public func clearSystemConfigPb() -> Pbuser.Builder {
            systemConfigPbBuilder_ = nil
            builderResult.hasSystemConfigPb = false
            builderResult.systemConfigPb = nil
            return self
        }
        ///当前网盘容量
        public var diskCap:Int64 {
            get {
                return builderResult.diskCap
            }
            set (value) {
                builderResult.hasDiskCap = true
                builderResult.diskCap = value
            }
        }
        public var hasDiskCap:Bool {
            get {
                return builderResult.hasDiskCap
            }
        }
        @discardableResult
        public func setDiskCap(_ value:Int64) -> Pbuser.Builder {
            self.diskCap = value
            return self
        }
        @discardableResult
        public func clearDiskCap() -> Pbuser.Builder{
            builderResult.hasDiskCap = false
            builderResult.diskCap = nil
            return self
        }
        ///园务 院长
        public var dean:Pbdean! {
            get {
                if deanBuilder_ != nil {
                    builderResult.dean = deanBuilder_.getMessage()
                }
                return builderResult.dean
            }
            set (value) {
                builderResult.hasDean = value != nil
                builderResult.dean = value
            }
        }
        public var hasDean:Bool {
            get {
                return builderResult.hasDean
            }
        }
        fileprivate var deanBuilder_:Pbdean.Builder! {
            didSet {
                builderResult.hasDean = true
            }
        }
        public func getDeanBuilder() -> Pbdean.Builder {
            if deanBuilder_ == nil {
                deanBuilder_ = Pbdean.Builder()
                builderResult.dean = deanBuilder_.getMessage()
                if dean != nil {
                    try! deanBuilder_.mergeFrom(other: dean)
                }
            }
            return deanBuilder_
        }
        @discardableResult
        public func setDean(_ value:Pbdean!) -> Pbuser.Builder {
            self.dean = value
            return self
        }
        @discardableResult
        public func mergeDean(value:Pbdean) throws -> Pbuser.Builder {
            if builderResult.hasDean {
                builderResult.dean = try Pbdean.builderWithPrototype(prototype:builderResult.dean).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.dean = value
            }
            builderResult.hasDean = true
            return self
        }
        @discardableResult
        public func clearDean() -> Pbuser.Builder {
            deanBuilder_ = nil
            builderResult.hasDean = false
            builderResult.dean = nil
            return self
        }
        ///是否是游客
        public var isTourist:Int32 {
            get {
                return builderResult.isTourist
            }
            set (value) {
                builderResult.hasIsTourist = true
                builderResult.isTourist = value
            }
        }
        public var hasIsTourist:Bool {
            get {
                return builderResult.hasIsTourist
            }
        }
        @discardableResult
        public func setIsTourist(_ value:Int32) -> Pbuser.Builder {
            self.isTourist = value
            return self
        }
        @discardableResult
        public func clearIsTourist() -> Pbuser.Builder{
            builderResult.hasIsTourist = false
            builderResult.isTourist = nil
            return self
        }
        ///融云token
        public var rcToken:String {
            get {
                return builderResult.rcToken
            }
            set (value) {
                builderResult.hasRcToken = true
                builderResult.rcToken = value
            }
        }
        public var hasRcToken:Bool {
            get {
                return builderResult.hasRcToken
            }
        }
        @discardableResult
        public func setRcToken(_ value:String) -> Pbuser.Builder {
            self.rcToken = value
            return self
        }
        @discardableResult
        public func clearRcToken() -> Pbuser.Builder{
            builderResult.hasRcToken = false
            builderResult.rcToken = nil
            return self
        }
        ///判断用户是否需要进入收费页面
        public var isUserCharge:Int32 {
            get {
                return builderResult.isUserCharge
            }
            set (value) {
                builderResult.hasIsUserCharge = true
                builderResult.isUserCharge = value
            }
        }
        public var hasIsUserCharge:Bool {
            get {
                return builderResult.hasIsUserCharge
            }
        }
        @discardableResult
        public func setIsUserCharge(_ value:Int32) -> Pbuser.Builder {
            self.isUserCharge = value
            return self
        }
        @discardableResult
        public func clearIsUserCharge() -> Pbuser.Builder{
            builderResult.hasIsUserCharge = false
            builderResult.isUserCharge = nil
            return self
        }
        ///验证码
        public var code:String {
            get {
                return builderResult.code
            }
            set (value) {
                builderResult.hasCode = true
                builderResult.code = value
            }
        }
        public var hasCode:Bool {
            get {
                return builderResult.hasCode
            }
        }
        @discardableResult
        public func setCode(_ value:String) -> Pbuser.Builder {
            self.code = value
            return self
        }
        @discardableResult
        public func clearCode() -> Pbuser.Builder{
            builderResult.hasCode = false
            builderResult.code = nil
            return self
        }
        ///用户登录后授权token
        public var sessionToken:String {
            get {
                return builderResult.sessionToken
            }
            set (value) {
                builderResult.hasSessionToken = true
                builderResult.sessionToken = value
            }
        }
        public var hasSessionToken:Bool {
            get {
                return builderResult.hasSessionToken
            }
        }
        @discardableResult
        public func setSessionToken(_ value:String) -> Pbuser.Builder {
            self.sessionToken = value
            return self
        }
        @discardableResult
        public func clearSessionToken() -> Pbuser.Builder{
            builderResult.hasSessionToken = false
            builderResult.sessionToken = nil
            return self
        }
        ///新密码
        public var repassword:String {
            get {
                return builderResult.repassword
            }
            set (value) {
                builderResult.hasRepassword = true
                builderResult.repassword = value
            }
        }
        public var hasRepassword:Bool {
            get {
                return builderResult.hasRepassword
            }
        }
        @discardableResult
        public func setRepassword(_ value:String) -> Pbuser.Builder {
            self.repassword = value
            return self
        }
        @discardableResult
        public func clearRepassword() -> Pbuser.Builder{
            builderResult.hasRepassword = false
            builderResult.repassword = nil
            return self
        }
        ///当前classId
        public var cutClassId:Int64 {
            get {
                return builderResult.cutClassId
            }
            set (value) {
                builderResult.hasCutClassId = true
                builderResult.cutClassId = value
            }
        }
        public var hasCutClassId:Bool {
            get {
                return builderResult.hasCutClassId
            }
        }
        @discardableResult
        public func setCutClassId(_ value:Int64) -> Pbuser.Builder {
            self.cutClassId = value
            return self
        }
        @discardableResult
        public func clearCutClassId() -> Pbuser.Builder{
            builderResult.hasCutClassId = false
            builderResult.cutClassId = nil
            return self
        }
        ///登录时间戳
        public var signinstamp:Int64 {
            get {
                return builderResult.signinstamp
            }
            set (value) {
                builderResult.hasSigninstamp = true
                builderResult.signinstamp = value
            }
        }
        public var hasSigninstamp:Bool {
            get {
                return builderResult.hasSigninstamp
            }
        }
        @discardableResult
        public func setSigninstamp(_ value:Int64) -> Pbuser.Builder {
            self.signinstamp = value
            return self
        }
        @discardableResult
        public func clearSigninstamp() -> Pbuser.Builder{
            builderResult.hasSigninstamp = false
            builderResult.signinstamp = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Pbuser.Builder {
            builderResult = Pbuser()
            return self
        }
        override public func clone() throws -> Pbuser.Builder {
            return try Pbuser.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Pbuser {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Pbuser {
            let returnMe:Pbuser = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Pbuser) throws -> Pbuser.Builder {
            if other == Pbuser() {
                return self
            }
            if other.hasUid {
                uid = other.uid
            }
            if other.hasSchoolId {
                schoolId = other.schoolId
            }
            if other.hasUuid {
                uuid = other.uuid
            }
            if other.hasUsername {
                username = other.username
            }
            if other.hasPassword {
                password = other.password
            }
            if other.hasName {
                name = other.name
            }
            if other.hasUserType {
                userType = other.userType
            }
            if other.hasPhaseId {
                phaseId = other.phaseId
            }
            if other.hasGender {
                gender = other.gender
            }
            if other.hasMobile {
                mobile = other.mobile
            }
            if other.hasAddress {
                address = other.address
            }
            if other.hasEmail {
                email = other.email
            }
            if other.hasToken {
                token = other.token
            }
            if other.hasSchoolName {
                schoolName = other.schoolName
            }
            if other.hasPortrait {
                portrait = other.portrait
            }
            if (other.hasParent) {
                try mergeParent(value: other.parent)
            }
            if (other.hasTeacher) {
                try mergeTeacher(value: other.teacher)
            }
            if (other.hasSchool) {
                try mergeSchool(value: other.school)
            }
            if !other.funcCtrlPb.isEmpty  {
                 builderResult.funcCtrlPb += other.funcCtrlPb
            }
            if other.hasHasInitPwd {
                hasInitPwd = other.hasInitPwd
            }
            if other.hasBucketDomain {
                bucketDomain = other.bucketDomain
            }
            if other.hasUptoken {
                uptoken = other.uptoken
            }
            if other.hasGroupStatus {
                groupStatus = other.groupStatus
            }
            if other.hasIsMember {
                isMember = other.isMember
            }
            if other.hasDeadline {
                deadline = other.deadline
            }
            if (other.hasSystemConfigPb) {
                try mergeSystemConfigPb(value: other.systemConfigPb)
            }
            if other.hasDiskCap {
                diskCap = other.diskCap
            }
            if (other.hasDean) {
                try mergeDean(value: other.dean)
            }
            if other.hasIsTourist {
                isTourist = other.isTourist
            }
            if other.hasRcToken {
                rcToken = other.rcToken
            }
            if other.hasIsUserCharge {
                isUserCharge = other.isUserCharge
            }
            if other.hasCode {
                code = other.code
            }
            if other.hasSessionToken {
                sessionToken = other.sessionToken
            }
            if other.hasRepassword {
                repassword = other.repassword
            }
            if other.hasCutClassId {
                cutClassId = other.cutClassId
            }
            if other.hasSigninstamp {
                signinstamp = other.signinstamp
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pbuser.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbuser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    uid = try codedInputStream.readInt64()

                case 16:
                    schoolId = try codedInputStream.readInt64()

                case 26:
                    uuid = try codedInputStream.readString()

                case 34:
                    username = try codedInputStream.readString()

                case 42:
                    password = try codedInputStream.readString()

                case 50:
                    name = try codedInputStream.readString()

                case 56:
                    let valueIntuserType = try codedInputStream.readEnum()
                    if let enumsuserType = PbuserRole(rawValue:valueIntuserType){
                        userType = enumsuserType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 7, value:Int64(valueIntuserType))
                    }

                case 64:
                    phaseId = try codedInputStream.readInt64()

                case 72:
                    gender = try codedInputStream.readInt32()

                case 82:
                    mobile = try codedInputStream.readString()

                case 90:
                    address = try codedInputStream.readString()

                case 98:
                    email = try codedInputStream.readString()

                case 106:
                    token = try codedInputStream.readString()

                case 114:
                    schoolName = try codedInputStream.readString()

                case 122:
                    portrait = try codedInputStream.readString()

                case 130:
                    let subBuilder:Pbparent.Builder = Pbparent.Builder()
                    if hasParent {
                        try subBuilder.mergeFrom(other: parent)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    parent = subBuilder.buildPartial()

                case 138:
                    let subBuilder:Pbteacher.Builder = Pbteacher.Builder()
                    if hasTeacher {
                        try subBuilder.mergeFrom(other: teacher)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    teacher = subBuilder.buildPartial()

                case 146:
                    let subBuilder:Pbschool.Builder = Pbschool.Builder()
                    if hasSchool {
                        try subBuilder.mergeFrom(other: school)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    school = subBuilder.buildPartial()

                case 154:
                    let subBuilder = PbfuncCtrl.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    funcCtrlPb.append(subBuilder.buildPartial())

                case 160:
                    hasInitPwd = try codedInputStream.readInt32()

                case 170:
                    bucketDomain = try codedInputStream.readString()

                case 178:
                    uptoken = try codedInputStream.readString()

                case 184:
                    groupStatus = try codedInputStream.readInt32()

                case 192:
                    isMember = try codedInputStream.readInt32()

                case 200:
                    deadline = try codedInputStream.readInt64()

                case 210:
                    let subBuilder:PbsystemCfg.Builder = PbsystemCfg.Builder()
                    if hasSystemConfigPb {
                        try subBuilder.mergeFrom(other: systemConfigPb)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    systemConfigPb = subBuilder.buildPartial()

                case 216:
                    diskCap = try codedInputStream.readInt64()

                case 226:
                    let subBuilder:Pbdean.Builder = Pbdean.Builder()
                    if hasDean {
                        try subBuilder.mergeFrom(other: dean)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    dean = subBuilder.buildPartial()

                case 232:
                    isTourist = try codedInputStream.readInt32()

                case 242:
                    rcToken = try codedInputStream.readString()

                case 248:
                    isUserCharge = try codedInputStream.readInt32()

                case 258:
                    code = try codedInputStream.readString()

                case 266:
                    sessionToken = try codedInputStream.readString()

                case 274:
                    repassword = try codedInputStream.readString()

                case 280:
                    cutClassId = try codedInputStream.readInt64()

                case 288:
                    signinstamp = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pbuser.Builder {
            let resultDecodedBuilder = Pbuser.Builder()
            if let jsonValueUid = jsonMap["uid"] as? String {
                resultDecodedBuilder.uid = Int64(jsonValueUid)!
            } else if let jsonValueUid = jsonMap["uid"] as? Int {
                resultDecodedBuilder.uid = Int64(jsonValueUid)
            }
            if let jsonValueSchoolId = jsonMap["schoolId"] as? String {
                resultDecodedBuilder.schoolId = Int64(jsonValueSchoolId)!
            } else if let jsonValueSchoolId = jsonMap["schoolId"] as? Int {
                resultDecodedBuilder.schoolId = Int64(jsonValueSchoolId)
            }
            if let jsonValueUuid = jsonMap["uuid"] as? String {
                resultDecodedBuilder.uuid = jsonValueUuid
            }
            if let jsonValueUsername = jsonMap["username"] as? String {
                resultDecodedBuilder.username = jsonValueUsername
            }
            if let jsonValuePassword = jsonMap["password"] as? String {
                resultDecodedBuilder.password = jsonValuePassword
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueUserType = jsonMap["userType"] as? String {
                resultDecodedBuilder.userType = try PbuserRole.fromString(jsonValueUserType)
            }
            if let jsonValuePhaseId = jsonMap["phaseId"] as? String {
                resultDecodedBuilder.phaseId = Int64(jsonValuePhaseId)!
            } else if let jsonValuePhaseId = jsonMap["phaseId"] as? Int {
                resultDecodedBuilder.phaseId = Int64(jsonValuePhaseId)
            }
            if let jsonValueGender = jsonMap["gender"] as? Int {
                resultDecodedBuilder.gender = Int32(jsonValueGender)
            } else if let jsonValueGender = jsonMap["gender"] as? String {
                resultDecodedBuilder.gender = Int32(jsonValueGender)!
            }
            if let jsonValueMobile = jsonMap["mobile"] as? String {
                resultDecodedBuilder.mobile = jsonValueMobile
            }
            if let jsonValueAddress = jsonMap["address"] as? String {
                resultDecodedBuilder.address = jsonValueAddress
            }
            if let jsonValueEmail = jsonMap["email"] as? String {
                resultDecodedBuilder.email = jsonValueEmail
            }
            if let jsonValueToken = jsonMap["token"] as? String {
                resultDecodedBuilder.token = jsonValueToken
            }
            if let jsonValueSchoolName = jsonMap["schoolName"] as? String {
                resultDecodedBuilder.schoolName = jsonValueSchoolName
            }
            if let jsonValuePortrait = jsonMap["portrait"] as? String {
                resultDecodedBuilder.portrait = jsonValuePortrait
            }
            if let jsonValueParent = jsonMap["parent"] as? Dictionary<String,Any> {
                resultDecodedBuilder.parent = try Pbparent.Builder.decodeToBuilder(jsonMap:jsonValueParent).build()

            }
            if let jsonValueTeacher = jsonMap["teacher"] as? Dictionary<String,Any> {
                resultDecodedBuilder.teacher = try Pbteacher.Builder.decodeToBuilder(jsonMap:jsonValueTeacher).build()

            }
            if let jsonValueSchool = jsonMap["school"] as? Dictionary<String,Any> {
                resultDecodedBuilder.school = try Pbschool.Builder.decodeToBuilder(jsonMap:jsonValueSchool).build()

            }
            if let jsonValueFuncCtrlPb = jsonMap["funcCtrlPb"] as? Array<Dictionary<String,Any>> {
                var jsonArrayFuncCtrlPb:Array<PbfuncCtrl> = []
                for oneValueFuncCtrlPb in jsonValueFuncCtrlPb {
                    let messageFromStringFuncCtrlPb = try PbfuncCtrl.Builder.decodeToBuilder(jsonMap:oneValueFuncCtrlPb).build()

                    jsonArrayFuncCtrlPb.append(messageFromStringFuncCtrlPb)
                }
                resultDecodedBuilder.funcCtrlPb = jsonArrayFuncCtrlPb
            }
            if let jsonValueHasInitPwd = jsonMap["hasInitPwd"] as? Int {
                resultDecodedBuilder.hasInitPwd = Int32(jsonValueHasInitPwd)
            } else if let jsonValueHasInitPwd = jsonMap["hasInitPwd"] as? String {
                resultDecodedBuilder.hasInitPwd = Int32(jsonValueHasInitPwd)!
            }
            if let jsonValueBucketDomain = jsonMap["bucketDomain"] as? String {
                resultDecodedBuilder.bucketDomain = jsonValueBucketDomain
            }
            if let jsonValueUptoken = jsonMap["uptoken"] as? String {
                resultDecodedBuilder.uptoken = jsonValueUptoken
            }
            if let jsonValueGroupStatus = jsonMap["groupStatus"] as? Int {
                resultDecodedBuilder.groupStatus = Int32(jsonValueGroupStatus)
            } else if let jsonValueGroupStatus = jsonMap["groupStatus"] as? String {
                resultDecodedBuilder.groupStatus = Int32(jsonValueGroupStatus)!
            }
            if let jsonValueIsMember = jsonMap["isMember"] as? Int {
                resultDecodedBuilder.isMember = Int32(jsonValueIsMember)
            } else if let jsonValueIsMember = jsonMap["isMember"] as? String {
                resultDecodedBuilder.isMember = Int32(jsonValueIsMember)!
            }
            if let jsonValueDeadline = jsonMap["deadline"] as? String {
                resultDecodedBuilder.deadline = Int64(jsonValueDeadline)!
            } else if let jsonValueDeadline = jsonMap["deadline"] as? Int {
                resultDecodedBuilder.deadline = Int64(jsonValueDeadline)
            }
            if let jsonValueSystemConfigPb = jsonMap["systemConfigPb"] as? Dictionary<String,Any> {
                resultDecodedBuilder.systemConfigPb = try PbsystemCfg.Builder.decodeToBuilder(jsonMap:jsonValueSystemConfigPb).build()

            }
            if let jsonValueDiskCap = jsonMap["diskCap"] as? String {
                resultDecodedBuilder.diskCap = Int64(jsonValueDiskCap)!
            } else if let jsonValueDiskCap = jsonMap["diskCap"] as? Int {
                resultDecodedBuilder.diskCap = Int64(jsonValueDiskCap)
            }
            if let jsonValueDean = jsonMap["dean"] as? Dictionary<String,Any> {
                resultDecodedBuilder.dean = try Pbdean.Builder.decodeToBuilder(jsonMap:jsonValueDean).build()

            }
            if let jsonValueIsTourist = jsonMap["isTourist"] as? Int {
                resultDecodedBuilder.isTourist = Int32(jsonValueIsTourist)
            } else if let jsonValueIsTourist = jsonMap["isTourist"] as? String {
                resultDecodedBuilder.isTourist = Int32(jsonValueIsTourist)!
            }
            if let jsonValueRcToken = jsonMap["rcToken"] as? String {
                resultDecodedBuilder.rcToken = jsonValueRcToken
            }
            if let jsonValueIsUserCharge = jsonMap["isUserCharge"] as? Int {
                resultDecodedBuilder.isUserCharge = Int32(jsonValueIsUserCharge)
            } else if let jsonValueIsUserCharge = jsonMap["isUserCharge"] as? String {
                resultDecodedBuilder.isUserCharge = Int32(jsonValueIsUserCharge)!
            }
            if let jsonValueCode = jsonMap["code"] as? String {
                resultDecodedBuilder.code = jsonValueCode
            }
            if let jsonValueSessionToken = jsonMap["sessionToken"] as? String {
                resultDecodedBuilder.sessionToken = jsonValueSessionToken
            }
            if let jsonValueRepassword = jsonMap["repassword"] as? String {
                resultDecodedBuilder.repassword = jsonValueRepassword
            }
            if let jsonValueCutClassId = jsonMap["cutClassId"] as? String {
                resultDecodedBuilder.cutClassId = Int64(jsonValueCutClassId)!
            } else if let jsonValueCutClassId = jsonMap["cutClassId"] as? Int {
                resultDecodedBuilder.cutClassId = Int64(jsonValueCutClassId)
            }
            if let jsonValueSigninstamp = jsonMap["signinstamp"] as? String {
                resultDecodedBuilder.signinstamp = Int64(jsonValueSigninstamp)!
            } else if let jsonValueSigninstamp = jsonMap["signinstamp"] as? Int {
                resultDecodedBuilder.signinstamp = Int64(jsonValueSigninstamp)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Pbuser.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pbuser.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension PbuserList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<PbuserList> {
        var mergedArray = Array<PbuserList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> PbuserList? {
        return try PbuserList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> PbuserList {
        return try PbuserList.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> PbuserList {
        return try PbuserList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> PbuserList {
        return try PbuserList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> PbuserList {
        return try PbuserList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> PbuserList {
        return try PbuserList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PbuserList {
        return try PbuserList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "userList": return self.userList
        default: return nil
        }
    }
}
extension PbuserList.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = PbuserList
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "userList": return self.userList
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "userList":
                guard let newSubscriptValue = newSubscriptValue as? Array<Pbuser> else {
                    return
                }
                self.userList = newSubscriptValue
            default: return
            }
        }
    }
}
extension Pbdean: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pbdean> {
        var mergedArray = Array<Pbdean>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pbdean? {
        return try Pbdean.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Pbdean {
        return try Pbdean.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pbdean {
        return try Pbdean.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Pbdean {
        return try Pbdean.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pbdean {
        return try Pbdean.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pbdean {
        return try Pbdean.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbdean {
        return try Pbdean.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "classes": return self.classes
        default: return nil
        }
    }
}
extension Pbdean.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Pbdean
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "classes": return self.classes
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "classes":
                guard let newSubscriptValue = newSubscriptValue as? Array<Pbclass> else {
                    return
                }
                self.classes = newSubscriptValue
            default: return
            }
        }
    }
}
extension Pbparent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pbparent> {
        var mergedArray = Array<Pbparent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pbparent? {
        return try Pbparent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Pbparent {
        return try Pbparent.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pbparent {
        return try Pbparent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Pbparent {
        return try Pbparent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pbparent {
        return try Pbparent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pbparent {
        return try Pbparent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbparent {
        return try Pbparent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "mobile": return self.mobile
        case "student": return self.student
        case "classes": return self.classes
        case "currentStuId": return self.currentStuId
        default: return nil
        }
    }
}
extension Pbparent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Pbparent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "mobile": return self.mobile
            case "student": return self.student
            case "classes": return self.classes
            case "currentStuId": return self.currentStuId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "mobile":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.mobile = newSubscriptValue
            case "student":
                guard let newSubscriptValue = newSubscriptValue as? Array<Pbstudent> else {
                    return
                }
                self.student = newSubscriptValue
            case "classes":
                guard let newSubscriptValue = newSubscriptValue as? Array<Pbclass> else {
                    return
                }
                self.classes = newSubscriptValue
            case "currentStuId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.currentStuId = newSubscriptValue
            default: return
            }
        }
    }
}
extension Pbteacher: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pbteacher> {
        var mergedArray = Array<Pbteacher>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pbteacher? {
        return try Pbteacher.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Pbteacher {
        return try Pbteacher.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pbteacher {
        return try Pbteacher.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Pbteacher {
        return try Pbteacher.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pbteacher {
        return try Pbteacher.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pbteacher {
        return try Pbteacher.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbteacher {
        return try Pbteacher.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "mobile": return self.mobile
        case "classes": return self.classes
        default: return nil
        }
    }
}
extension Pbteacher.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Pbteacher
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "mobile": return self.mobile
            case "classes": return self.classes
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "mobile":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.mobile = newSubscriptValue
            case "classes":
                guard let newSubscriptValue = newSubscriptValue as? Array<Pbclass> else {
                    return
                }
                self.classes = newSubscriptValue
            default: return
            }
        }
    }
}
extension Pbstudent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pbstudent> {
        var mergedArray = Array<Pbstudent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pbstudent? {
        return try Pbstudent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Pbstudent {
        return try Pbstudent.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pbstudent {
        return try Pbstudent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Pbstudent {
        return try Pbstudent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pbstudent {
        return try Pbstudent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pbstudent {
        return try Pbstudent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbstudent {
        return try Pbstudent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "uuid": return self.uuid
        case "name": return self.name
        case "classId": return self.classId
        case "gradeId": return self.gradeId
        case "classNo": return self.classNo
        case "birthday": return self.birthday
        case "parentType": return self.parentType
        case "gender": return self.gender
        case "portrait": return self.portrait
        case "userId": return self.userId
        default: return nil
        }
    }
}
extension Pbstudent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Pbstudent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "uuid": return self.uuid
            case "name": return self.name
            case "classId": return self.classId
            case "gradeId": return self.gradeId
            case "classNo": return self.classNo
            case "birthday": return self.birthday
            case "parentType": return self.parentType
            case "gender": return self.gender
            case "portrait": return self.portrait
            case "userId": return self.userId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "uuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uuid = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "classId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.classId = newSubscriptValue
            case "gradeId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.gradeId = newSubscriptValue
            case "classNo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.classNo = newSubscriptValue
            case "birthday":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.birthday = newSubscriptValue
            case "parentType":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.parentType = newSubscriptValue
            case "gender":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.gender = newSubscriptValue
            case "portrait":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.portrait = newSubscriptValue
            case "userId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.userId = newSubscriptValue
            default: return
            }
        }
    }
}
extension Pbschool: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pbschool> {
        var mergedArray = Array<Pbschool>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pbschool? {
        return try Pbschool.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Pbschool {
        return try Pbschool.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pbschool {
        return try Pbschool.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Pbschool {
        return try Pbschool.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pbschool {
        return try Pbschool.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pbschool {
        return try Pbschool.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbschool {
        return try Pbschool.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "domain": return self.domain
        case "name": return self.name
        case "year": return self.year
        case "semester": return self.semester
        case "isSchoolCharge": return self.isSchoolCharge
        case "freeDate": return self.freeDate
        default: return nil
        }
    }
}
extension Pbschool.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Pbschool
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "domain": return self.domain
            case "name": return self.name
            case "year": return self.year
            case "semester": return self.semester
            case "isSchoolCharge": return self.isSchoolCharge
            case "freeDate": return self.freeDate
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.id = newSubscriptValue
            case "domain":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.domain = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "year":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.year = newSubscriptValue
            case "semester":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.semester = newSubscriptValue
            case "isSchoolCharge":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.isSchoolCharge = newSubscriptValue
            case "freeDate":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.freeDate = newSubscriptValue
            default: return
            }
        }
    }
}
extension PbsystemCfg: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<PbsystemCfg> {
        var mergedArray = Array<PbsystemCfg>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> PbsystemCfg? {
        return try PbsystemCfg.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PbsystemCfg {
        return try PbsystemCfg.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "diskCap": return self.diskCap
        case "uploadLimit": return self.uploadLimit
        case "classPb": return self.classPb
        default: return nil
        }
    }
}
extension PbsystemCfg.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = PbsystemCfg
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "diskCap": return self.diskCap
            case "uploadLimit": return self.uploadLimit
            case "classPb": return self.classPb
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "diskCap":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.diskCap = newSubscriptValue
            case "uploadLimit":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uploadLimit = newSubscriptValue
            case "classPb":
                guard let newSubscriptValue = newSubscriptValue as? Pbclass else {
                    return
                }
                self.classPb = newSubscriptValue
            default: return
            }
        }
    }
}
extension PbfuncCtrl: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<PbfuncCtrl> {
        var mergedArray = Array<PbfuncCtrl>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> PbfuncCtrl? {
        return try PbfuncCtrl.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PbfuncCtrl {
        return try PbfuncCtrl.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "schoolId": return self.schoolId
        case "funcCode": return self.funcCode
        case "androidStatus": return self.androidStatus
        case "iosStatus": return self.iosStatus
        default: return nil
        }
    }
}
extension PbfuncCtrl.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = PbfuncCtrl
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "schoolId": return self.schoolId
            case "funcCode": return self.funcCode
            case "androidStatus": return self.androidStatus
            case "iosStatus": return self.iosStatus
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "schoolId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.schoolId = newSubscriptValue
            case "funcCode":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.funcCode = newSubscriptValue
            case "androidStatus":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.androidStatus = newSubscriptValue
            case "iosStatus":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.iosStatus = newSubscriptValue
            default: return
            }
        }
    }
}
extension Pbuser: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pbuser> {
        var mergedArray = Array<Pbuser>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pbuser? {
        return try Pbuser.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Pbuser {
        return try Pbuser.Builder().mergeFrom(data: data, extensionRegistry:PbsignUserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pbuser {
        return try Pbuser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Pbuser {
        return try Pbuser.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pbuser {
        return try Pbuser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pbuser {
        return try Pbuser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pbuser {
        return try Pbuser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uid": return self.uid
        case "schoolId": return self.schoolId
        case "uuid": return self.uuid
        case "username": return self.username
        case "password": return self.password
        case "name": return self.name
        case "userType": return self.userType
        case "phaseId": return self.phaseId
        case "gender": return self.gender
        case "mobile": return self.mobile
        case "address": return self.address
        case "email": return self.email
        case "token": return self.token
        case "schoolName": return self.schoolName
        case "portrait": return self.portrait
        case "parent": return self.parent
        case "teacher": return self.teacher
        case "school": return self.school
        case "funcCtrlPb": return self.funcCtrlPb
        case "hasInitPwd": return self.hasInitPwd
        case "bucketDomain": return self.bucketDomain
        case "uptoken": return self.uptoken
        case "groupStatus": return self.groupStatus
        case "isMember": return self.isMember
        case "deadline": return self.deadline
        case "systemConfigPb": return self.systemConfigPb
        case "diskCap": return self.diskCap
        case "dean": return self.dean
        case "isTourist": return self.isTourist
        case "rcToken": return self.rcToken
        case "isUserCharge": return self.isUserCharge
        case "code": return self.code
        case "sessionToken": return self.sessionToken
        case "repassword": return self.repassword
        case "cutClassId": return self.cutClassId
        case "signinstamp": return self.signinstamp
        default: return nil
        }
    }
}
extension Pbuser.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Pbuser
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uid": return self.uid
            case "schoolId": return self.schoolId
            case "uuid": return self.uuid
            case "username": return self.username
            case "password": return self.password
            case "name": return self.name
            case "userType": return self.userType
            case "phaseId": return self.phaseId
            case "gender": return self.gender
            case "mobile": return self.mobile
            case "address": return self.address
            case "email": return self.email
            case "token": return self.token
            case "schoolName": return self.schoolName
            case "portrait": return self.portrait
            case "parent": return self.parent
            case "teacher": return self.teacher
            case "school": return self.school
            case "funcCtrlPb": return self.funcCtrlPb
            case "hasInitPwd": return self.hasInitPwd
            case "bucketDomain": return self.bucketDomain
            case "uptoken": return self.uptoken
            case "groupStatus": return self.groupStatus
            case "isMember": return self.isMember
            case "deadline": return self.deadline
            case "systemConfigPb": return self.systemConfigPb
            case "diskCap": return self.diskCap
            case "dean": return self.dean
            case "isTourist": return self.isTourist
            case "rcToken": return self.rcToken
            case "isUserCharge": return self.isUserCharge
            case "code": return self.code
            case "sessionToken": return self.sessionToken
            case "repassword": return self.repassword
            case "cutClassId": return self.cutClassId
            case "signinstamp": return self.signinstamp
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uid":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.uid = newSubscriptValue
            case "schoolId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.schoolId = newSubscriptValue
            case "uuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uuid = newSubscriptValue
            case "username":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.username = newSubscriptValue
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "userType":
                guard let newSubscriptValue = newSubscriptValue as? PbuserRole else {
                    return
                }
                self.userType = newSubscriptValue
            case "phaseId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.phaseId = newSubscriptValue
            case "gender":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.gender = newSubscriptValue
            case "mobile":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.mobile = newSubscriptValue
            case "address":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.address = newSubscriptValue
            case "email":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.email = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            case "schoolName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.schoolName = newSubscriptValue
            case "portrait":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.portrait = newSubscriptValue
            case "parent":
                guard let newSubscriptValue = newSubscriptValue as? Pbparent else {
                    return
                }
                self.parent = newSubscriptValue
            case "teacher":
                guard let newSubscriptValue = newSubscriptValue as? Pbteacher else {
                    return
                }
                self.teacher = newSubscriptValue
            case "school":
                guard let newSubscriptValue = newSubscriptValue as? Pbschool else {
                    return
                }
                self.school = newSubscriptValue
            case "funcCtrlPb":
                guard let newSubscriptValue = newSubscriptValue as? Array<PbfuncCtrl> else {
                    return
                }
                self.funcCtrlPb = newSubscriptValue
            case "hasInitPwd":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.hasInitPwd = newSubscriptValue
            case "bucketDomain":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.bucketDomain = newSubscriptValue
            case "uptoken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uptoken = newSubscriptValue
            case "groupStatus":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.groupStatus = newSubscriptValue
            case "isMember":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.isMember = newSubscriptValue
            case "deadline":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.deadline = newSubscriptValue
            case "systemConfigPb":
                guard let newSubscriptValue = newSubscriptValue as? PbsystemCfg else {
                    return
                }
                self.systemConfigPb = newSubscriptValue
            case "diskCap":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.diskCap = newSubscriptValue
            case "dean":
                guard let newSubscriptValue = newSubscriptValue as? Pbdean else {
                    return
                }
                self.dean = newSubscriptValue
            case "isTourist":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.isTourist = newSubscriptValue
            case "rcToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.rcToken = newSubscriptValue
            case "isUserCharge":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.isUserCharge = newSubscriptValue
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.code = newSubscriptValue
            case "sessionToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.sessionToken = newSubscriptValue
            case "repassword":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.repassword = newSubscriptValue
            case "cutClassId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.cutClassId = newSubscriptValue
            case "signinstamp":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.signinstamp = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
