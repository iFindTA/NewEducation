// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PBClass.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBClass {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///班级ID
  var id: Int64 = 0

  ///班级名称
  var className: String = String()

  ///年级ID
  var gradeID: Int64 = 0

  ///年级名称
  var gradeName: String = String()

  ///监控地址
  var monitorURL: String = String()

  ///年
  var year: Int64 = 0

  ///学期
  var semester: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBClass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBClass"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "className"),
    3: .same(proto: "gradeId"),
    4: .same(proto: "gradeName"),
    5: .same(proto: "monitorUrl"),
    6: .same(proto: "year"),
    7: .same(proto: "semester"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.className)
      case 3: try decoder.decodeSingularInt64Field(value: &self.gradeID)
      case 4: try decoder.decodeSingularStringField(value: &self.gradeName)
      case 5: try decoder.decodeSingularStringField(value: &self.monitorURL)
      case 6: try decoder.decodeSingularInt64Field(value: &self.year)
      case 7: try decoder.decodeSingularInt32Field(value: &self.semester)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.className.isEmpty {
      try visitor.visitSingularStringField(value: self.className, fieldNumber: 2)
    }
    if self.gradeID != 0 {
      try visitor.visitSingularInt64Field(value: self.gradeID, fieldNumber: 3)
    }
    if !self.gradeName.isEmpty {
      try visitor.visitSingularStringField(value: self.gradeName, fieldNumber: 4)
    }
    if !self.monitorURL.isEmpty {
      try visitor.visitSingularStringField(value: self.monitorURL, fieldNumber: 5)
    }
    if self.year != 0 {
      try visitor.visitSingularInt64Field(value: self.year, fieldNumber: 6)
    }
    if self.semester != 0 {
      try visitor.visitSingularInt32Field(value: self.semester, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBClass) -> Bool {
    if self.id != other.id {return false}
    if self.className != other.className {return false}
    if self.gradeID != other.gradeID {return false}
    if self.gradeName != other.gradeName {return false}
    if self.monitorURL != other.monitorURL {return false}
    if self.year != other.year {return false}
    if self.semester != other.semester {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
