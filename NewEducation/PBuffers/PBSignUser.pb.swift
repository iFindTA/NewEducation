// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PBSignUser.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum PBUserRole: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///游客
  case visitor // = 0

  ///老师
  case teacher // = 1

  ///学生
  case student // = 2

  ///家长
  case parent // = 3

  ///园务
  case garden // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .visitor
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .visitor
    case 1: self = .teacher
    case 2: self = .student
    case 3: self = .parent
    case 4: self = .garden
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .visitor: return 0
    case .teacher: return 1
    case .student: return 2
    case .parent: return 3
    case .garden: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct PBUserList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户列表
  var userList: [PBUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBDean {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///班级列表
  var classes: [PBClass] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBParent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///手机号码
  var mobile: String = String()

  ///学生列表
  var student: [PBStudent] = []

  ///学生班级列表
  var classes: [PBClass] = []

  ///当前选择的学生ID
  var currentStuID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBTeacher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///手机号码
  var mobile: String = String()

  ///关联的班级列表
  var classes: [PBClass] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBStudent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  ///唯一统一标示符
  var uuid: String = String()

  ///名称
  var name: String = String()

  ///班级
  var classID: Int64 = 0

  ///年级
  var gradeID: Int64 = 0

  ///班级码
  var classNo: String = String()

  ///出生日期
  var birthday: Int64 = 0

  ///家长类型
  var parentType: Int32 = 0

  ///性别
  var gender: Int32 = 0

  ///头像
  var portrait: String = String()

  ///用户id
  var userID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBSchool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///学校id
  var id: Int64 = 0

  ///学校域名
  var domain: String = String()

  ///学校名称
  var name: String = String()

  ///年
  var year: Int64 = 0

  ///学期
  var semester: Int32 = 0

  ///是否收费
  var isSchoolCharge: Int32 = 0

  ///免费时间
  var freeDate: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBSystemCfg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///网盘容量
  var diskCap: String {
    get {return _storage._diskCap}
    set {_uniqueStorage()._diskCap = newValue}
  }

  ///上传限制
  var uploadLimit: String {
    get {return _storage._uploadLimit}
    set {_uniqueStorage()._uploadLimit = newValue}
  }

  ///班级
  var classPb: PBClass {
    get {return _storage._classPb ?? PBClass()}
    set {_uniqueStorage()._classPb = newValue}
  }
  /// Returns true if `classPb` has been explicitly set.
  var hasClassPb: Bool {return _storage._classPb != nil}
  /// Clears the value of `classPb`. Subsequent reads from it will return its default value.
  mutating func clearClassPb() {_storage._classPb = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PBFuncCtrl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///学校id
  var schoolID: Int64 = 0

  ///功能code
  var funcCode: String = String()

  ///状态
  var androidStatus: Int32 = 0

  ///状态
  var iosStatus: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var uid: Int64 {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///学校id
  var schoolID: Int64 {
    get {return _storage._schoolID}
    set {_uniqueStorage()._schoolID = newValue}
  }

  ///唯一统一标示符
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  ///用户名
  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  ///用户名
  var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  ///中文名
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///用户类型(1老师;2学生;3家长;4教务)
  var userType: PBUserRole {
    get {return _storage._userType}
    set {_uniqueStorage()._userType = newValue}
  }

  ///学段id
  var phaseID: Int64 {
    get {return _storage._phaseID}
    set {_uniqueStorage()._phaseID = newValue}
  }

  ///性别1:男，2：女
  var gender: Int32 {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  ///电话
  var mobile: String {
    get {return _storage._mobile}
    set {_uniqueStorage()._mobile = newValue}
  }

  ///地址
  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  ///email
  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  ///token
  var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  ///学校名称
  var schoolName: String {
    get {return _storage._schoolName}
    set {_uniqueStorage()._schoolName = newValue}
  }

  ///头像
  var portrait: String {
    get {return _storage._portrait}
    set {_uniqueStorage()._portrait = newValue}
  }

  var parent: PBParent {
    get {return _storage._parent ?? PBParent()}
    set {_uniqueStorage()._parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return _storage._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {_storage._parent = nil}

  var teacher: PBTeacher {
    get {return _storage._teacher ?? PBTeacher()}
    set {_uniqueStorage()._teacher = newValue}
  }
  /// Returns true if `teacher` has been explicitly set.
  var hasTeacher: Bool {return _storage._teacher != nil}
  /// Clears the value of `teacher`. Subsequent reads from it will return its default value.
  mutating func clearTeacher() {_storage._teacher = nil}

  var school: PBSchool {
    get {return _storage._school ?? PBSchool()}
    set {_uniqueStorage()._school = newValue}
  }
  /// Returns true if `school` has been explicitly set.
  var hasSchool: Bool {return _storage._school != nil}
  /// Clears the value of `school`. Subsequent reads from it will return its default value.
  mutating func clearSchool() {_storage._school = nil}

  var funcCtrlPb: [PBFuncCtrl] {
    get {return _storage._funcCtrlPb}
    set {_uniqueStorage()._funcCtrlPb = newValue}
  }

  var hasInitPwd_p: Int32 {
    get {return _storage._hasInitPwd_p}
    set {_uniqueStorage()._hasInitPwd_p = newValue}
  }

  ///七牛域名
  var bucketDomain: String {
    get {return _storage._bucketDomain}
    set {_uniqueStorage()._bucketDomain = newValue}
  }

  ///七牛上传token
  var uptoken: String {
    get {return _storage._uptoken}
    set {_uniqueStorage()._uptoken = newValue}
  }

  ///群聊开关状态
  var groupStatus: Int32 {
    get {return _storage._groupStatus}
    set {_uniqueStorage()._groupStatus = newValue}
  }

  ///是否是会员
  var isMember: Int32 {
    get {return _storage._isMember}
    set {_uniqueStorage()._isMember = newValue}
  }

  ///会员截止日期
  var deadline: Int64 {
    get {return _storage._deadline}
    set {_uniqueStorage()._deadline = newValue}
  }

  ///系统配置
  var systemConfigPb: PBSystemCfg {
    get {return _storage._systemConfigPb ?? PBSystemCfg()}
    set {_uniqueStorage()._systemConfigPb = newValue}
  }
  /// Returns true if `systemConfigPb` has been explicitly set.
  var hasSystemConfigPb: Bool {return _storage._systemConfigPb != nil}
  /// Clears the value of `systemConfigPb`. Subsequent reads from it will return its default value.
  mutating func clearSystemConfigPb() {_storage._systemConfigPb = nil}

  ///当前网盘容量
  var diskCap: Int64 {
    get {return _storage._diskCap}
    set {_uniqueStorage()._diskCap = newValue}
  }

  ///园务 院长
  var dean: PBDean {
    get {return _storage._dean ?? PBDean()}
    set {_uniqueStorage()._dean = newValue}
  }
  /// Returns true if `dean` has been explicitly set.
  var hasDean: Bool {return _storage._dean != nil}
  /// Clears the value of `dean`. Subsequent reads from it will return its default value.
  mutating func clearDean() {_storage._dean = nil}

  ///是否是游客
  var isTourist: Int32 {
    get {return _storage._isTourist}
    set {_uniqueStorage()._isTourist = newValue}
  }

  ///融云token
  var rcToken: String {
    get {return _storage._rcToken}
    set {_uniqueStorage()._rcToken = newValue}
  }

  ///判断用户是否需要进入收费页面
  var isUserCharge: Int32 {
    get {return _storage._isUserCharge}
    set {_uniqueStorage()._isUserCharge = newValue}
  }

  ///验证码
  var code: String {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  ///用户登录后授权token
  var sessionToken: String {
    get {return _storage._sessionToken}
    set {_uniqueStorage()._sessionToken = newValue}
  }

  ///新密码
  var repassword: String {
    get {return _storage._repassword}
    set {_uniqueStorage()._repassword = newValue}
  }

  ///当前classId
  var cutClassID: Int64 {
    get {return _storage._cutClassID}
    set {_uniqueStorage()._cutClassID = newValue}
  }

  ///登录时间戳
  var signinstamp: Int64 {
    get {return _storage._signinstamp}
    set {_uniqueStorage()._signinstamp = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBUserRole: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Visitor"),
    1: .same(proto: "Teacher"),
    2: .same(proto: "Student"),
    3: .same(proto: "Parent"),
    4: .same(proto: "Garden"),
  ]
}

extension PBUserList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBUserList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.userList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBUserList) -> Bool {
    if self.userList != other.userList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBDean: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBDean"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "classes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.classes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.classes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBDean) -> Bool {
    if self.classes != other.classes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBParent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBParent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mobile"),
    2: .same(proto: "student"),
    3: .same(proto: "classes"),
    4: .same(proto: "currentStuID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mobile)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.student)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.classes)
      case 4: try decoder.decodeSingularInt64Field(value: &self.currentStuID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 1)
    }
    if !self.student.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.student, fieldNumber: 2)
    }
    if !self.classes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classes, fieldNumber: 3)
    }
    if self.currentStuID != 0 {
      try visitor.visitSingularInt64Field(value: self.currentStuID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBParent) -> Bool {
    if self.mobile != other.mobile {return false}
    if self.student != other.student {return false}
    if self.classes != other.classes {return false}
    if self.currentStuID != other.currentStuID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTeacher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBTeacher"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mobile"),
    2: .same(proto: "classes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mobile)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.classes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 1)
    }
    if !self.classes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBTeacher) -> Bool {
    if self.mobile != other.mobile {return false}
    if self.classes != other.classes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBStudent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBStudent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "name"),
    4: .same(proto: "classId"),
    5: .same(proto: "gradeId"),
    6: .same(proto: "classNo"),
    7: .same(proto: "birthday"),
    8: .same(proto: "parentType"),
    9: .same(proto: "gender"),
    10: .same(proto: "portrait"),
    11: .same(proto: "userId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularInt64Field(value: &self.classID)
      case 5: try decoder.decodeSingularInt64Field(value: &self.gradeID)
      case 6: try decoder.decodeSingularStringField(value: &self.classNo)
      case 7: try decoder.decodeSingularInt64Field(value: &self.birthday)
      case 8: try decoder.decodeSingularInt32Field(value: &self.parentType)
      case 9: try decoder.decodeSingularInt32Field(value: &self.gender)
      case 10: try decoder.decodeSingularStringField(value: &self.portrait)
      case 11: try decoder.decodeSingularInt64Field(value: &self.userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.classID != 0 {
      try visitor.visitSingularInt64Field(value: self.classID, fieldNumber: 4)
    }
    if self.gradeID != 0 {
      try visitor.visitSingularInt64Field(value: self.gradeID, fieldNumber: 5)
    }
    if !self.classNo.isEmpty {
      try visitor.visitSingularStringField(value: self.classNo, fieldNumber: 6)
    }
    if self.birthday != 0 {
      try visitor.visitSingularInt64Field(value: self.birthday, fieldNumber: 7)
    }
    if self.parentType != 0 {
      try visitor.visitSingularInt32Field(value: self.parentType, fieldNumber: 8)
    }
    if self.gender != 0 {
      try visitor.visitSingularInt32Field(value: self.gender, fieldNumber: 9)
    }
    if !self.portrait.isEmpty {
      try visitor.visitSingularStringField(value: self.portrait, fieldNumber: 10)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBStudent) -> Bool {
    if self.id != other.id {return false}
    if self.uuid != other.uuid {return false}
    if self.name != other.name {return false}
    if self.classID != other.classID {return false}
    if self.gradeID != other.gradeID {return false}
    if self.classNo != other.classNo {return false}
    if self.birthday != other.birthday {return false}
    if self.parentType != other.parentType {return false}
    if self.gender != other.gender {return false}
    if self.portrait != other.portrait {return false}
    if self.userID != other.userID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSchool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBSchool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "domain"),
    3: .same(proto: "name"),
    4: .same(proto: "year"),
    5: .same(proto: "semester"),
    6: .same(proto: "isSchoolCharge"),
    7: .same(proto: "freeDate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.domain)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularInt64Field(value: &self.year)
      case 5: try decoder.decodeSingularInt32Field(value: &self.semester)
      case 6: try decoder.decodeSingularInt32Field(value: &self.isSchoolCharge)
      case 7: try decoder.decodeSingularInt64Field(value: &self.freeDate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.year != 0 {
      try visitor.visitSingularInt64Field(value: self.year, fieldNumber: 4)
    }
    if self.semester != 0 {
      try visitor.visitSingularInt32Field(value: self.semester, fieldNumber: 5)
    }
    if self.isSchoolCharge != 0 {
      try visitor.visitSingularInt32Field(value: self.isSchoolCharge, fieldNumber: 6)
    }
    if self.freeDate != 0 {
      try visitor.visitSingularInt64Field(value: self.freeDate, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBSchool) -> Bool {
    if self.id != other.id {return false}
    if self.domain != other.domain {return false}
    if self.name != other.name {return false}
    if self.year != other.year {return false}
    if self.semester != other.semester {return false}
    if self.isSchoolCharge != other.isSchoolCharge {return false}
    if self.freeDate != other.freeDate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSystemCfg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBSystemCfg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "diskCap"),
    2: .same(proto: "uploadLimit"),
    3: .same(proto: "classPb"),
  ]

  fileprivate class _StorageClass {
    var _diskCap: String = String()
    var _uploadLimit: String = String()
    var _classPb: PBClass? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _diskCap = source._diskCap
      _uploadLimit = source._uploadLimit
      _classPb = source._classPb
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._diskCap)
        case 2: try decoder.decodeSingularStringField(value: &_storage._uploadLimit)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._classPb)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._diskCap.isEmpty {
        try visitor.visitSingularStringField(value: _storage._diskCap, fieldNumber: 1)
      }
      if !_storage._uploadLimit.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uploadLimit, fieldNumber: 2)
      }
      if let v = _storage._classPb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBSystemCfg) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._diskCap != other_storage._diskCap {return false}
        if _storage._uploadLimit != other_storage._uploadLimit {return false}
        if _storage._classPb != other_storage._classPb {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBFuncCtrl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBFuncCtrl"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "schoolId"),
    2: .same(proto: "funcCode"),
    3: .same(proto: "androidStatus"),
    4: .same(proto: "iosStatus"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.schoolID)
      case 2: try decoder.decodeSingularStringField(value: &self.funcCode)
      case 3: try decoder.decodeSingularInt32Field(value: &self.androidStatus)
      case 4: try decoder.decodeSingularInt32Field(value: &self.iosStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.schoolID != 0 {
      try visitor.visitSingularInt64Field(value: self.schoolID, fieldNumber: 1)
    }
    if !self.funcCode.isEmpty {
      try visitor.visitSingularStringField(value: self.funcCode, fieldNumber: 2)
    }
    if self.androidStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.androidStatus, fieldNumber: 3)
    }
    if self.iosStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.iosStatus, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBFuncCtrl) -> Bool {
    if self.schoolID != other.schoolID {return false}
    if self.funcCode != other.funcCode {return false}
    if self.androidStatus != other.androidStatus {return false}
    if self.iosStatus != other.iosStatus {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "schoolId"),
    3: .same(proto: "uuid"),
    4: .same(proto: "username"),
    5: .same(proto: "password"),
    6: .same(proto: "name"),
    7: .same(proto: "userType"),
    8: .same(proto: "phaseId"),
    9: .same(proto: "gender"),
    10: .same(proto: "mobile"),
    11: .same(proto: "address"),
    12: .same(proto: "email"),
    13: .same(proto: "token"),
    14: .same(proto: "schoolName"),
    15: .same(proto: "portrait"),
    16: .same(proto: "parent"),
    17: .same(proto: "teacher"),
    18: .same(proto: "school"),
    19: .same(proto: "funcCtrlPb"),
    20: .same(proto: "hasInitPwd"),
    21: .same(proto: "bucketDomain"),
    22: .same(proto: "uptoken"),
    23: .same(proto: "groupStatus"),
    24: .same(proto: "isMember"),
    25: .same(proto: "deadline"),
    26: .same(proto: "systemConfigPb"),
    27: .same(proto: "diskCap"),
    28: .same(proto: "dean"),
    29: .same(proto: "isTourist"),
    30: .same(proto: "rcToken"),
    31: .same(proto: "isUserCharge"),
    32: .same(proto: "code"),
    33: .same(proto: "sessionToken"),
    34: .same(proto: "repassword"),
    35: .same(proto: "cutClassId"),
    36: .same(proto: "signinstamp"),
  ]

  fileprivate class _StorageClass {
    var _uid: Int64 = 0
    var _schoolID: Int64 = 0
    var _uuid: String = String()
    var _username: String = String()
    var _password: String = String()
    var _name: String = String()
    var _userType: PBUserRole = .visitor
    var _phaseID: Int64 = 0
    var _gender: Int32 = 0
    var _mobile: String = String()
    var _address: String = String()
    var _email: String = String()
    var _token: String = String()
    var _schoolName: String = String()
    var _portrait: String = String()
    var _parent: PBParent? = nil
    var _teacher: PBTeacher? = nil
    var _school: PBSchool? = nil
    var _funcCtrlPb: [PBFuncCtrl] = []
    var _hasInitPwd_p: Int32 = 0
    var _bucketDomain: String = String()
    var _uptoken: String = String()
    var _groupStatus: Int32 = 0
    var _isMember: Int32 = 0
    var _deadline: Int64 = 0
    var _systemConfigPb: PBSystemCfg? = nil
    var _diskCap: Int64 = 0
    var _dean: PBDean? = nil
    var _isTourist: Int32 = 0
    var _rcToken: String = String()
    var _isUserCharge: Int32 = 0
    var _code: String = String()
    var _sessionToken: String = String()
    var _repassword: String = String()
    var _cutClassID: Int64 = 0
    var _signinstamp: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _schoolID = source._schoolID
      _uuid = source._uuid
      _username = source._username
      _password = source._password
      _name = source._name
      _userType = source._userType
      _phaseID = source._phaseID
      _gender = source._gender
      _mobile = source._mobile
      _address = source._address
      _email = source._email
      _token = source._token
      _schoolName = source._schoolName
      _portrait = source._portrait
      _parent = source._parent
      _teacher = source._teacher
      _school = source._school
      _funcCtrlPb = source._funcCtrlPb
      _hasInitPwd_p = source._hasInitPwd_p
      _bucketDomain = source._bucketDomain
      _uptoken = source._uptoken
      _groupStatus = source._groupStatus
      _isMember = source._isMember
      _deadline = source._deadline
      _systemConfigPb = source._systemConfigPb
      _diskCap = source._diskCap
      _dean = source._dean
      _isTourist = source._isTourist
      _rcToken = source._rcToken
      _isUserCharge = source._isUserCharge
      _code = source._code
      _sessionToken = source._sessionToken
      _repassword = source._repassword
      _cutClassID = source._cutClassID
      _signinstamp = source._signinstamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._uid)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._schoolID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 4: try decoder.decodeSingularStringField(value: &_storage._username)
        case 5: try decoder.decodeSingularStringField(value: &_storage._password)
        case 6: try decoder.decodeSingularStringField(value: &_storage._name)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._userType)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._phaseID)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._gender)
        case 10: try decoder.decodeSingularStringField(value: &_storage._mobile)
        case 11: try decoder.decodeSingularStringField(value: &_storage._address)
        case 12: try decoder.decodeSingularStringField(value: &_storage._email)
        case 13: try decoder.decodeSingularStringField(value: &_storage._token)
        case 14: try decoder.decodeSingularStringField(value: &_storage._schoolName)
        case 15: try decoder.decodeSingularStringField(value: &_storage._portrait)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._parent)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._teacher)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._school)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._funcCtrlPb)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._hasInitPwd_p)
        case 21: try decoder.decodeSingularStringField(value: &_storage._bucketDomain)
        case 22: try decoder.decodeSingularStringField(value: &_storage._uptoken)
        case 23: try decoder.decodeSingularInt32Field(value: &_storage._groupStatus)
        case 24: try decoder.decodeSingularInt32Field(value: &_storage._isMember)
        case 25: try decoder.decodeSingularInt64Field(value: &_storage._deadline)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._systemConfigPb)
        case 27: try decoder.decodeSingularInt64Field(value: &_storage._diskCap)
        case 28: try decoder.decodeSingularMessageField(value: &_storage._dean)
        case 29: try decoder.decodeSingularInt32Field(value: &_storage._isTourist)
        case 30: try decoder.decodeSingularStringField(value: &_storage._rcToken)
        case 31: try decoder.decodeSingularInt32Field(value: &_storage._isUserCharge)
        case 32: try decoder.decodeSingularStringField(value: &_storage._code)
        case 33: try decoder.decodeSingularStringField(value: &_storage._sessionToken)
        case 34: try decoder.decodeSingularStringField(value: &_storage._repassword)
        case 35: try decoder.decodeSingularInt64Field(value: &_storage._cutClassID)
        case 36: try decoder.decodeSingularInt64Field(value: &_storage._signinstamp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._uid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._uid, fieldNumber: 1)
      }
      if _storage._schoolID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._schoolID, fieldNumber: 2)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 3)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 4)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 5)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 6)
      }
      if _storage._userType != .visitor {
        try visitor.visitSingularEnumField(value: _storage._userType, fieldNumber: 7)
      }
      if _storage._phaseID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._phaseID, fieldNumber: 8)
      }
      if _storage._gender != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gender, fieldNumber: 9)
      }
      if !_storage._mobile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobile, fieldNumber: 10)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 11)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 12)
      }
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 13)
      }
      if !_storage._schoolName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schoolName, fieldNumber: 14)
      }
      if !_storage._portrait.isEmpty {
        try visitor.visitSingularStringField(value: _storage._portrait, fieldNumber: 15)
      }
      if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._teacher {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._school {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if !_storage._funcCtrlPb.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._funcCtrlPb, fieldNumber: 19)
      }
      if _storage._hasInitPwd_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hasInitPwd_p, fieldNumber: 20)
      }
      if !_storage._bucketDomain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucketDomain, fieldNumber: 21)
      }
      if !_storage._uptoken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uptoken, fieldNumber: 22)
      }
      if _storage._groupStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._groupStatus, fieldNumber: 23)
      }
      if _storage._isMember != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isMember, fieldNumber: 24)
      }
      if _storage._deadline != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deadline, fieldNumber: 25)
      }
      if let v = _storage._systemConfigPb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if _storage._diskCap != 0 {
        try visitor.visitSingularInt64Field(value: _storage._diskCap, fieldNumber: 27)
      }
      if let v = _storage._dean {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if _storage._isTourist != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isTourist, fieldNumber: 29)
      }
      if !_storage._rcToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcToken, fieldNumber: 30)
      }
      if _storage._isUserCharge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isUserCharge, fieldNumber: 31)
      }
      if !_storage._code.isEmpty {
        try visitor.visitSingularStringField(value: _storage._code, fieldNumber: 32)
      }
      if !_storage._sessionToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sessionToken, fieldNumber: 33)
      }
      if !_storage._repassword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._repassword, fieldNumber: 34)
      }
      if _storage._cutClassID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cutClassID, fieldNumber: 35)
      }
      if _storage._signinstamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._signinstamp, fieldNumber: 36)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: PBUser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._uid != other_storage._uid {return false}
        if _storage._schoolID != other_storage._schoolID {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._username != other_storage._username {return false}
        if _storage._password != other_storage._password {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._userType != other_storage._userType {return false}
        if _storage._phaseID != other_storage._phaseID {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._mobile != other_storage._mobile {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._token != other_storage._token {return false}
        if _storage._schoolName != other_storage._schoolName {return false}
        if _storage._portrait != other_storage._portrait {return false}
        if _storage._parent != other_storage._parent {return false}
        if _storage._teacher != other_storage._teacher {return false}
        if _storage._school != other_storage._school {return false}
        if _storage._funcCtrlPb != other_storage._funcCtrlPb {return false}
        if _storage._hasInitPwd_p != other_storage._hasInitPwd_p {return false}
        if _storage._bucketDomain != other_storage._bucketDomain {return false}
        if _storage._uptoken != other_storage._uptoken {return false}
        if _storage._groupStatus != other_storage._groupStatus {return false}
        if _storage._isMember != other_storage._isMember {return false}
        if _storage._deadline != other_storage._deadline {return false}
        if _storage._systemConfigPb != other_storage._systemConfigPb {return false}
        if _storage._diskCap != other_storage._diskCap {return false}
        if _storage._dean != other_storage._dean {return false}
        if _storage._isTourist != other_storage._isTourist {return false}
        if _storage._rcToken != other_storage._rcToken {return false}
        if _storage._isUserCharge != other_storage._isUserCharge {return false}
        if _storage._code != other_storage._code {return false}
        if _storage._sessionToken != other_storage._sessionToken {return false}
        if _storage._repassword != other_storage._repassword {return false}
        if _storage._cutClassID != other_storage._cutClassID {return false}
        if _storage._signinstamp != other_storage._signinstamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
